
T2_G030_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d88  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f4  080032f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032f4  080032f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f4  080032f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f8  080032f8  000132f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003308  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003308  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b566  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c70  00000000  00000000  0002b5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  0002d250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000665  00000000  00000000  0002da98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014631  00000000  00000000  0002e0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6c9  00000000  00000000  0004272e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f1f9  00000000  00000000  0004ddf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c84  00000000  00000000  000ccff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000cec74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002e28 	.word	0x08002e28

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002e28 	.word	0x08002e28

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fe:	b0a1      	sub	sp, #132	; 0x84
 8000400:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000402:	f000 fe45 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 f895 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f000 f929 	bl	8000660 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800040e:	f000 f8d9 	bl	80005c4 <MX_USART1_UART_Init>
// uint8_t time[]="19:22:33\n";
// Printred_on(date,time);

//Validation function calling...

  uint8_t model[]="PI1-05 P\n";
 8000412:	256c      	movs	r5, #108	; 0x6c
 8000414:	197b      	adds	r3, r7, r5
 8000416:	4a43      	ldr	r2, [pc, #268]	; (8000524 <main+0x128>)
 8000418:	ca03      	ldmia	r2!, {r0, r1}
 800041a:	c303      	stmia	r3!, {r0, r1}
 800041c:	8812      	ldrh	r2, [r2, #0]
 800041e:	801a      	strh	r2, [r3, #0]
  uint8_t company[]="-01-001 Ver.1.0\n";
 8000420:	2658      	movs	r6, #88	; 0x58
 8000422:	19bb      	adds	r3, r7, r6
 8000424:	4a40      	ldr	r2, [pc, #256]	; (8000528 <main+0x12c>)
 8000426:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000428:	c313      	stmia	r3!, {r0, r1, r4}
 800042a:	6811      	ldr	r1, [r2, #0]
 800042c:	6019      	str	r1, [r3, #0]
 800042e:	7912      	ldrb	r2, [r2, #4]
 8000430:	711a      	strb	r2, [r3, #4]

  Vaccum_test_result_title(model,company);
 8000432:	19ba      	adds	r2, r7, r6
 8000434:	197b      	adds	r3, r7, r5
 8000436:	0011      	movs	r1, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f000 f9bd 	bl	80007b8 <Vaccum_test_result_title>

  uint8_t company_name[]="\n";
 800043e:	2054      	movs	r0, #84	; 0x54
 8000440:	183b      	adds	r3, r7, r0
 8000442:	220a      	movs	r2, #10
 8000444:	801a      	strh	r2, [r3, #0]
  uint8_t location[]="\n";
 8000446:	2150      	movs	r1, #80	; 0x50
 8000448:	187b      	adds	r3, r7, r1
 800044a:	220a      	movs	r2, #10
 800044c:	801a      	strh	r2, [r3, #0]
  uint8_t test_date[]="\n";
 800044e:	254c      	movs	r5, #76	; 0x4c
 8000450:	197b      	adds	r3, r7, r5
 8000452:	220a      	movs	r2, #10
 8000454:	801a      	strh	r2, [r3, #0]
  uint8_t test_start_time[]="\n";
 8000456:	2448      	movs	r4, #72	; 0x48
 8000458:	193b      	adds	r3, r7, r4
 800045a:	220a      	movs	r2, #10
 800045c:	801a      	strh	r2, [r3, #0]
  uint8_t test_end_time[]="\n";
 800045e:	2644      	movs	r6, #68	; 0x44
 8000460:	19bb      	adds	r3, r7, r6
 8000462:	220a      	movs	r2, #10
 8000464:	801a      	strh	r2, [r3, #0]

  Validation_report_start(company_name,location,test_date,test_start_time,test_end_time);
 8000466:	193c      	adds	r4, r7, r4
 8000468:	197a      	adds	r2, r7, r5
 800046a:	1879      	adds	r1, r7, r1
 800046c:	1838      	adds	r0, r7, r0
 800046e:	19bb      	adds	r3, r7, r6
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	0023      	movs	r3, r4
 8000474:	f000 fadc 	bl	8000a30 <Validation_report_start>

  uint8_t prod_name[]="\n";
 8000478:	2140      	movs	r1, #64	; 0x40
 800047a:	187b      	adds	r3, r7, r1
 800047c:	220a      	movs	r2, #10
 800047e:	801a      	strh	r2, [r3, #0]
  uint8_t prod_no[]="\n";
 8000480:	203c      	movs	r0, #60	; 0x3c
 8000482:	183b      	adds	r3, r7, r0
 8000484:	220a      	movs	r2, #10
 8000486:	801a      	strh	r2, [r3, #0]

  Validation_report_product_details(prod_name,prod_no);
 8000488:	183a      	adds	r2, r7, r0
 800048a:	187b      	adds	r3, r7, r1
 800048c:	0011      	movs	r1, r2
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fb8a 	bl	8000ba8 <Validation_report_product_details>

  uint8_t test_number[]="\n";
 8000494:	2038      	movs	r0, #56	; 0x38
 8000496:	183b      	adds	r3, r7, r0
 8000498:	220a      	movs	r2, #10
 800049a:	801a      	strh	r2, [r3, #0]
  uint8_t input[]="\n";
 800049c:	2134      	movs	r1, #52	; 0x34
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	220a      	movs	r2, #10
 80004a2:	801a      	strh	r2, [r3, #0]
  uint8_t maintained[]="\n";
 80004a4:	2530      	movs	r5, #48	; 0x30
 80004a6:	197b      	adds	r3, r7, r5
 80004a8:	220a      	movs	r2, #10
 80004aa:	801a      	strh	r2, [r3, #0]
  uint8_t meter[]="\n";
 80004ac:	242c      	movs	r4, #44	; 0x2c
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	220a      	movs	r2, #10
 80004b2:	801a      	strh	r2, [r3, #0]
  uint8_t difference[]="\n";
 80004b4:	2628      	movs	r6, #40	; 0x28
 80004b6:	19bb      	adds	r3, r7, r6
 80004b8:	220a      	movs	r2, #10
 80004ba:	801a      	strh	r2, [r3, #0]
  uint8_t results[]="\n";
 80004bc:	2324      	movs	r3, #36	; 0x24
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	220a      	movs	r2, #10
 80004c2:	801a      	strh	r2, [r3, #0]

  Validation_report_results(test_number,input,maintained,meter,difference,results);
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	197a      	adds	r2, r7, r5
 80004c8:	1879      	adds	r1, r7, r1
 80004ca:	1838      	adds	r0, r7, r0
 80004cc:	2324      	movs	r3, #36	; 0x24
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	19bb      	adds	r3, r7, r6
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	0023      	movs	r3, r4
 80004d8:	f000 fbbe 	bl	8000c58 <Validation_report_results>
  uint8_t performed_by[]="\n";
 80004dc:	2020      	movs	r0, #32
 80004de:	183b      	adds	r3, r7, r0
 80004e0:	220a      	movs	r2, #10
 80004e2:	801a      	strh	r2, [r3, #0]
  uint8_t verified_by[]="\n";
 80004e4:	211c      	movs	r1, #28
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	220a      	movs	r2, #10
 80004ea:	801a      	strh	r2, [r3, #0]
  uint8_t sign[]="\n";
 80004ec:	2418      	movs	r4, #24
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	220a      	movs	r2, #10
 80004f2:	801a      	strh	r2, [r3, #0]
  Validation_report_end(performed_by,verified_by,sign);
 80004f4:	193a      	adds	r2, r7, r4
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	183b      	adds	r3, r7, r0
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fc90 	bl	8000e20 <Validation_report_end>

  uint8_t date[]="23/02/2024 ";
 8000500:	250c      	movs	r5, #12
 8000502:	197b      	adds	r3, r7, r5
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <main+0x130>)
 8000506:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000508:	c313      	stmia	r3!, {r0, r1, r4}
  uint8_t time[]="19:22:33\n";
 800050a:	003b      	movs	r3, r7
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <main+0x134>)
 800050e:	ca03      	ldmia	r2!, {r0, r1}
 8000510:	c303      	stmia	r3!, {r0, r1}
 8000512:	8812      	ldrh	r2, [r2, #0]
 8000514:	801a      	strh	r2, [r3, #0]
  Printred_on(date,time);
 8000516:	003a      	movs	r2, r7
 8000518:	197b      	adds	r3, r7, r5
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fa3b 	bl	8000998 <Printred_on>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  uint8_t data2[] = "Package Integrity tester\n";
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x126>
 8000524:	08002e40 	.word	0x08002e40
 8000528:	08002e4c 	.word	0x08002e4c
 800052c:	08002e60 	.word	0x08002e60
 8000530:	08002e6c 	.word	0x08002e6c

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b093      	sub	sp, #76	; 0x4c
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	2414      	movs	r4, #20
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	2334      	movs	r3, #52	; 0x34
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f002 fc43 	bl	8002dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	0018      	movs	r0, r3
 800054e:	2310      	movs	r3, #16
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f002 fc3c 	bl	8002dd0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	0018      	movs	r0, r3
 800055e:	f001 f859 	bl	8001614 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2202      	movs	r2, #2
 8000566:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	0052      	lsls	r2, r2, #1
 800056e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000570:	193b      	adds	r3, r7, r4
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	193b      	adds	r3, r7, r4
 8000578:	2240      	movs	r2, #64	; 0x40
 800057a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	193b      	adds	r3, r7, r4
 8000584:	0018      	movs	r0, r3
 8000586:	f001 f891 	bl	80016ac <HAL_RCC_OscConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800058e:	f000 f87d 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2207      	movs	r2, #7
 8000596:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2100      	movs	r1, #0
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fb8c 	bl	8001ccc <HAL_RCC_ClockConfig>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005b8:	f000 f868 	bl	800068c <Error_Handler>
  }
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b013      	add	sp, #76	; 0x4c
 80005c2:	bd90      	pop	{r4, r7, pc}

080005c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_USART1_UART_Init+0x94>)
 80005ca:	4a24      	ldr	r2, [pc, #144]	; (800065c <MX_USART1_UART_Init+0x98>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005ce:	4b22      	ldr	r3, [pc, #136]	; (8000658 <MX_USART1_UART_Init+0x94>)
 80005d0:	2296      	movs	r2, #150	; 0x96
 80005d2:	0192      	lsls	r2, r2, #6
 80005d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_USART1_UART_Init+0x94>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_USART1_UART_Init+0x94>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <MX_USART1_UART_Init+0x94>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_USART1_UART_Init+0x94>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_USART1_UART_Init+0x94>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_USART1_UART_Init+0x94>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_USART1_UART_Init+0x94>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_USART1_UART_Init+0x94>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_USART1_UART_Init+0x94>)
 8000608:	2200      	movs	r2, #0
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_USART1_UART_Init+0x94>)
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fe2c 	bl	800226c <HAL_UART_Init>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000618:	f000 f838 	bl	800068c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART1_UART_Init+0x94>)
 800061e:	2100      	movs	r1, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f002 faf5 	bl	8002c10 <HAL_UARTEx_SetTxFifoThreshold>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800062a:	f000 f82f 	bl	800068c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_USART1_UART_Init+0x94>)
 8000630:	2100      	movs	r1, #0
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fb2c 	bl	8002c90 <HAL_UARTEx_SetRxFifoThreshold>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800063c:	f000 f826 	bl	800068c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <MX_USART1_UART_Init+0x94>)
 8000642:	0018      	movs	r0, r3
 8000644:	f002 faaa 	bl	8002b9c <HAL_UARTEx_DisableFifoMode>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800064c:	f000 f81e 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000028 	.word	0x20000028
 800065c:	40013800 	.word	0x40013800

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_GPIO_Init+0x28>)
 8000668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_GPIO_Init+0x28>)
 800066c:	2102      	movs	r1, #2
 800066e:	430a      	orrs	r2, r1
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MX_GPIO_Init+0x28>)
 8000674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000676:	2202      	movs	r2, #2
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <UART_transfer>:
 */

#include "result_format.h"
#include "string.h"
void UART_transfer(uint8_t *data,uint8_t length)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	000a      	movs	r2, r1
 80006a2:	1cfb      	adds	r3, r7, #3
 80006a4:	701a      	strb	r2, [r3, #0]
//{	uint16_t length = strlen((char*)data);
	HAL_UART_Transmit(&huart1,data,length,HAL_MAX_DELAY);
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	2301      	movs	r3, #1
 80006ae:	425b      	negs	r3, r3
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <UART_transfer+0x28>)
 80006b4:	f001 fe30 	bl	8002318 <HAL_UART_Transmit>
//	HAL_Delay(1000);

}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000028 	.word	0x20000028

080006c4 <Default_font>:
void Default_font()
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
	uint8_t widthDefsize_command[]={0x1D,0x21,0x00};
 80006ca:	2008      	movs	r0, #8
 80006cc:	183b      	adds	r3, r7, r0
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <Default_font+0x60>)
 80006d0:	8811      	ldrh	r1, [r2, #0]
 80006d2:	8019      	strh	r1, [r3, #0]
 80006d4:	7892      	ldrb	r2, [r2, #2]
 80006d6:	709a      	strb	r2, [r3, #2]
	uint8_t fontDefsize_command[]={0x1B,0x21,0x00};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4a13      	ldr	r2, [pc, #76]	; (8000728 <Default_font+0x64>)
 80006dc:	8811      	ldrh	r1, [r2, #0]
 80006de:	8019      	strh	r1, [r3, #0]
 80006e0:	7892      	ldrb	r2, [r2, #2]
 80006e2:	709a      	strb	r2, [r3, #2]
	uint8_t length_widthDefsize = sizeof(widthDefsize_command);
 80006e4:	210f      	movs	r1, #15
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2203      	movs	r2, #3
 80006ea:	701a      	strb	r2, [r3, #0]
	uint8_t length_fontDefsize = sizeof(fontDefsize_command);
 80006ec:	240e      	movs	r4, #14
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2203      	movs	r2, #3
 80006f2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,&widthDefsize_command,length_widthDefsize,HAL_MAX_DELAY);
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	2301      	movs	r3, #1
 80006fc:	425b      	negs	r3, r3
 80006fe:	1839      	adds	r1, r7, r0
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <Default_font+0x68>)
 8000702:	f001 fe09 	bl	8002318 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,&fontDefsize_command,length_fontDefsize,HAL_MAX_DELAY);
 8000706:	193b      	adds	r3, r7, r4
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b29a      	uxth	r2, r3
 800070c:	2301      	movs	r3, #1
 800070e:	425b      	negs	r3, r3
 8000710:	1d39      	adds	r1, r7, #4
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <Default_font+0x68>)
 8000714:	f001 fe00 	bl	8002318 <HAL_UART_Transmit>
	Bold_disable();
 8000718:	f000 f82c 	bl	8000774 <Bold_disable>


}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b005      	add	sp, #20
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	08002e78 	.word	0x08002e78
 8000728:	08002e7c 	.word	0x08002e7c
 800072c:	20000028 	.word	0x20000028

08000730 <Bold_enable>:
void Bold_enable()
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	uint8_t boldcommand[]={0x1B,0x45,0x01};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4a0c      	ldr	r2, [pc, #48]	; (800076c <Bold_enable+0x3c>)
 800073a:	8811      	ldrh	r1, [r2, #0]
 800073c:	8019      	strh	r1, [r3, #0]
 800073e:	7892      	ldrb	r2, [r2, #2]
 8000740:	709a      	strb	r2, [r3, #2]
	uint8_t length = sizeof(boldcommand);
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	2203      	movs	r2, #3
 8000746:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,&boldcommand,length,HAL_MAX_DELAY);
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b29a      	uxth	r2, r3
 800074e:	2301      	movs	r3, #1
 8000750:	425b      	negs	r3, r3
 8000752:	1d39      	adds	r1, r7, #4
 8000754:	4806      	ldr	r0, [pc, #24]	; (8000770 <Bold_enable+0x40>)
 8000756:	f001 fddf 	bl	8002318 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800075a:	23fa      	movs	r3, #250	; 0xfa
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fd1c 	bl	800119c <HAL_Delay>

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}
 800076c:	08002e80 	.word	0x08002e80
 8000770:	20000028 	.word	0x20000028

08000774 <Bold_disable>:
void Bold_disable()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	uint8_t boldcommand[]={0x1B,0x45,0x00};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <Bold_disable+0x3c>)
 800077e:	8811      	ldrh	r1, [r2, #0]
 8000780:	8019      	strh	r1, [r3, #0]
 8000782:	7892      	ldrb	r2, [r2, #2]
 8000784:	709a      	strb	r2, [r3, #2]
	uint8_t length = sizeof(boldcommand);
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	2203      	movs	r2, #3
 800078a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,&boldcommand,length,HAL_MAX_DELAY);
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b29a      	uxth	r2, r3
 8000792:	2301      	movs	r3, #1
 8000794:	425b      	negs	r3, r3
 8000796:	1d39      	adds	r1, r7, #4
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <Bold_disable+0x40>)
 800079a:	f001 fdbd 	bl	8002318 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800079e:	23fa      	movs	r3, #250	; 0xfa
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fcfa 	bl	800119c <HAL_Delay>

}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	08002e84 	.word	0x08002e84
 80007b4:	20000028 	.word	0x20000028

080007b8 <Vaccum_test_result_title>:
void Vaccum_test_result_title(uint8_t *data1,uint8_t *data2)
{
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	b099      	sub	sp, #100	; 0x64
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	uint8_t smallfont_command[]={0x1B,0x21,0x01};
 80007c2:	2658      	movs	r6, #88	; 0x58
 80007c4:	19bb      	adds	r3, r7, r6
 80007c6:	4a48      	ldr	r2, [pc, #288]	; (80008e8 <Vaccum_test_result_title+0x130>)
 80007c8:	8811      	ldrh	r1, [r2, #0]
 80007ca:	8019      	strh	r1, [r3, #0]
 80007cc:	7892      	ldrb	r2, [r2, #2]
 80007ce:	709a      	strb	r2, [r3, #2]
	uint8_t widthInc_command[] = {0x1D,0x21,0x10};
 80007d0:	2354      	movs	r3, #84	; 0x54
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	4a45      	ldr	r2, [pc, #276]	; (80008ec <Vaccum_test_result_title+0x134>)
 80007d6:	8811      	ldrh	r1, [r2, #0]
 80007d8:	8019      	strh	r1, [r3, #0]
 80007da:	7892      	ldrb	r2, [r2, #2]
 80007dc:	709a      	strb	r2, [r3, #2]
	uint8_t length_smallfont = sizeof(smallfont_command);
 80007de:	225f      	movs	r2, #95	; 0x5f
 80007e0:	18bb      	adds	r3, r7, r2
 80007e2:	2203      	movs	r2, #3
 80007e4:	701a      	strb	r2, [r3, #0]
	uint8_t length_widthInc = sizeof(widthInc_command);
 80007e6:	205e      	movs	r0, #94	; 0x5e
 80007e8:	183b      	adds	r3, r7, r0
 80007ea:	2203      	movs	r2, #3
 80007ec:	701a      	strb	r2, [r3, #0]
	uint8_t main_title[] = "RAISE LAB EQUIPMENT\n\n";
 80007ee:	253c      	movs	r5, #60	; 0x3c
 80007f0:	197b      	adds	r3, r7, r5
 80007f2:	4a3f      	ldr	r2, [pc, #252]	; (80008f0 <Vaccum_test_result_title+0x138>)
 80007f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007f6:	c313      	stmia	r3!, {r0, r1, r4}
 80007f8:	ca03      	ldmia	r2!, {r0, r1}
 80007fa:	c303      	stmia	r3!, {r0, r1}
 80007fc:	8812      	ldrh	r2, [r2, #0]
 80007fe:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,&smallfont_command,length_smallfont,HAL_MAX_DELAY);
 8000800:	225f      	movs	r2, #95	; 0x5f
 8000802:	18bb      	adds	r3, r7, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b29a      	uxth	r2, r3
 8000808:	2301      	movs	r3, #1
 800080a:	425b      	negs	r3, r3
 800080c:	19b9      	adds	r1, r7, r6
 800080e:	4839      	ldr	r0, [pc, #228]	; (80008f4 <Vaccum_test_result_title+0x13c>)
 8000810:	f001 fd82 	bl	8002318 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,&widthInc_command,length_widthInc,HAL_MAX_DELAY);
 8000814:	205e      	movs	r0, #94	; 0x5e
 8000816:	183b      	adds	r3, r7, r0
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b29a      	uxth	r2, r3
 800081c:	2301      	movs	r3, #1
 800081e:	425b      	negs	r3, r3
 8000820:	2154      	movs	r1, #84	; 0x54
 8000822:	1879      	adds	r1, r7, r1
 8000824:	4833      	ldr	r0, [pc, #204]	; (80008f4 <Vaccum_test_result_title+0x13c>)
 8000826:	f001 fd77 	bl	8002318 <HAL_UART_Transmit>
	Bold_enable();
 800082a:	f7ff ff81 	bl	8000730 <Bold_enable>
	UART_transfer(main_title,strlen(main_title));
 800082e:	197b      	adds	r3, r7, r5
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff fc65 	bl	8000100 <strlen>
 8000836:	0003      	movs	r3, r0
 8000838:	b2da      	uxtb	r2, r3
 800083a:	197b      	adds	r3, r7, r5
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f7ff ff2a 	bl	8000698 <UART_transfer>
	Default_font();
 8000844:	f7ff ff3e 	bl	80006c4 <Default_font>
	uint8_t data[] = "Package Integrity Tester\n";
 8000848:	2520      	movs	r5, #32
 800084a:	197b      	adds	r3, r7, r5
 800084c:	4a2a      	ldr	r2, [pc, #168]	; (80008f8 <Vaccum_test_result_title+0x140>)
 800084e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000850:	c313      	stmia	r3!, {r0, r1, r4}
 8000852:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000854:	c313      	stmia	r3!, {r0, r1, r4}
 8000856:	8812      	ldrh	r2, [r2, #0]
 8000858:	801a      	strh	r2, [r3, #0]
	UART_transfer(data,strlen(data));
 800085a:	197b      	adds	r3, r7, r5
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff fc4f 	bl	8000100 <strlen>
 8000862:	0003      	movs	r3, r0
 8000864:	b2da      	uxtb	r2, r3
 8000866:	197b      	adds	r3, r7, r5
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff ff14 	bl	8000698 <UART_transfer>
	uint8_t Model[] = "Model: ";
 8000870:	2418      	movs	r4, #24
 8000872:	193b      	adds	r3, r7, r4
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <Vaccum_test_result_title+0x144>)
 8000876:	ca03      	ldmia	r2!, {r0, r1}
 8000878:	c303      	stmia	r3!, {r0, r1}
	uint8_t sr_no[] = "sr.No.: ";
 800087a:	250c      	movs	r5, #12
 800087c:	197b      	adds	r3, r7, r5
 800087e:	4a20      	ldr	r2, [pc, #128]	; (8000900 <Vaccum_test_result_title+0x148>)
 8000880:	ca03      	ldmia	r2!, {r0, r1}
 8000882:	c303      	stmia	r3!, {r0, r1}
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	701a      	strb	r2, [r3, #0]
	UART_transfer(Model,strlen(Model));
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff fc38 	bl	8000100 <strlen>
 8000890:	0003      	movs	r3, r0
 8000892:	b2da      	uxtb	r2, r3
 8000894:	193b      	adds	r3, r7, r4
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff fefd 	bl	8000698 <UART_transfer>
	UART_transfer(data1,strlen(data1));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	0018      	movs	r0, r3
 80008a2:	f7ff fc2d 	bl	8000100 <strlen>
 80008a6:	0003      	movs	r3, r0
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff fef2 	bl	8000698 <UART_transfer>
	UART_transfer(sr_no,strlen(sr_no));
 80008b4:	197b      	adds	r3, r7, r5
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff fc22 	bl	8000100 <strlen>
 80008bc:	0003      	movs	r3, r0
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	197b      	adds	r3, r7, r5
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff fee7 	bl	8000698 <UART_transfer>
	UART_transfer(data2,strlen(data2));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff fc17 	bl	8000100 <strlen>
 80008d2:	0003      	movs	r3, r0
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	0011      	movs	r1, r2
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff fedc 	bl	8000698 <UART_transfer>


}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b019      	add	sp, #100	; 0x64
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e8:	08002e88 	.word	0x08002e88
 80008ec:	08002e8c 	.word	0x08002e8c
 80008f0:	08002e90 	.word	0x08002e90
 80008f4:	20000028 	.word	0x20000028
 80008f8:	08002ea8 	.word	0x08002ea8
 80008fc:	08002ec4 	.word	0x08002ec4
 8000900:	08002ecc 	.word	0x08002ecc

08000904 <Vaccum_test_result_subtitle>:
void Vaccum_test_result_subtitle(uint8_t *data)
{
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	uint8_t smallfont_command[]={0x1B,0x21,0x01};
 800090c:	2010      	movs	r0, #16
 800090e:	183b      	adds	r3, r7, r0
 8000910:	4a1e      	ldr	r2, [pc, #120]	; (800098c <Vaccum_test_result_subtitle+0x88>)
 8000912:	8811      	ldrh	r1, [r2, #0]
 8000914:	8019      	strh	r1, [r3, #0]
 8000916:	7892      	ldrb	r2, [r2, #2]
 8000918:	709a      	strb	r2, [r3, #2]
	uint8_t widthInc_command[] = {0x1D,0x21,0x10};
 800091a:	240c      	movs	r4, #12
 800091c:	193b      	adds	r3, r7, r4
 800091e:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <Vaccum_test_result_subtitle+0x8c>)
 8000920:	8811      	ldrh	r1, [r2, #0]
 8000922:	8019      	strh	r1, [r3, #0]
 8000924:	7892      	ldrb	r2, [r2, #2]
 8000926:	709a      	strb	r2, [r3, #2]
	uint8_t length_smallfont = sizeof(smallfont_command);
 8000928:	2117      	movs	r1, #23
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2203      	movs	r2, #3
 800092e:	701a      	strb	r2, [r3, #0]
	uint8_t length_widthInc = sizeof(widthInc_command);
 8000930:	2516      	movs	r5, #22
 8000932:	197b      	adds	r3, r7, r5
 8000934:	2203      	movs	r2, #3
 8000936:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,&smallfont_command,length_smallfont,HAL_MAX_DELAY);
 8000938:	187b      	adds	r3, r7, r1
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b29a      	uxth	r2, r3
 800093e:	2301      	movs	r3, #1
 8000940:	425b      	negs	r3, r3
 8000942:	1839      	adds	r1, r7, r0
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <Vaccum_test_result_subtitle+0x90>)
 8000946:	f001 fce7 	bl	8002318 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,&widthInc_command,length_widthInc,HAL_MAX_DELAY);
 800094a:	197b      	adds	r3, r7, r5
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b29a      	uxth	r2, r3
 8000950:	2301      	movs	r3, #1
 8000952:	425b      	negs	r3, r3
 8000954:	1939      	adds	r1, r7, r4
 8000956:	480f      	ldr	r0, [pc, #60]	; (8000994 <Vaccum_test_result_subtitle+0x90>)
 8000958:	f001 fcde 	bl	8002318 <HAL_UART_Transmit>
	Bold_enable();
 800095c:	f7ff fee8 	bl	8000730 <Bold_enable>
	UART_transfer(data,strlen(data));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff fbcc 	bl	8000100 <strlen>
 8000968:	0003      	movs	r3, r0
 800096a:	b2da      	uxtb	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff fe91 	bl	8000698 <UART_transfer>
	HAL_Delay(1000);
 8000976:	23fa      	movs	r3, #250	; 0xfa
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fc0e 	bl	800119c <HAL_Delay>
	Default_font();
 8000980:	f7ff fea0 	bl	80006c4 <Default_font>
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b006      	add	sp, #24
 800098a:	bdb0      	pop	{r4, r5, r7, pc}
 800098c:	08002e88 	.word	0x08002e88
 8000990:	08002e8c 	.word	0x08002e8c
 8000994:	20000028 	.word	0x20000028

08000998 <Printred_on>:



}
void Printred_on(uint8_t *data1,uint8_t *data2)
{
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b090      	sub	sp, #64	; 0x40
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	uint8_t printed_on[] = "\nPrinted On :";
 80009a2:	2530      	movs	r5, #48	; 0x30
 80009a4:	197b      	adds	r3, r7, r5
 80009a6:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <Printred_on+0x90>)
 80009a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009aa:	c313      	stmia	r3!, {r0, r1, r4}
 80009ac:	8812      	ldrh	r2, [r2, #0]
 80009ae:	801a      	strh	r2, [r3, #0]
	UART_transfer(printed_on,strlen(printed_on));
 80009b0:	197b      	adds	r3, r7, r5
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff fba4 	bl	8000100 <strlen>
 80009b8:	0003      	movs	r3, r0
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	197b      	adds	r3, r7, r5
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff fe69 	bl	8000698 <UART_transfer>
	UART_transfer(data1,strlen(data1));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fb99 	bl	8000100 <strlen>
 80009ce:	0003      	movs	r3, r0
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff fe5e 	bl	8000698 <UART_transfer>
	UART_transfer(data2,strlen(data2));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fb8e 	bl	8000100 <strlen>
 80009e4:	0003      	movs	r3, r0
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff fe53 	bl	8000698 <UART_transfer>
	uint8_t end[] = "\* * * * * * * * * * * * * * * * \n";
 80009f2:	250c      	movs	r5, #12
 80009f4:	197b      	adds	r3, r7, r5
 80009f6:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <Printred_on+0x94>)
 80009f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009fa:	c313      	stmia	r3!, {r0, r1, r4}
 80009fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009fe:	c313      	stmia	r3!, {r0, r1, r4}
 8000a00:	ca03      	ldmia	r2!, {r0, r1}
 8000a02:	c303      	stmia	r3!, {r0, r1}
 8000a04:	8812      	ldrh	r2, [r2, #0]
 8000a06:	801a      	strh	r2, [r3, #0]
	UART_transfer(end,strlen(end));
 8000a08:	197b      	adds	r3, r7, r5
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff fb78 	bl	8000100 <strlen>
 8000a10:	0003      	movs	r3, r0
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	197b      	adds	r3, r7, r5
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff fe3d 	bl	8000698 <UART_transfer>


}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b010      	add	sp, #64	; 0x40
 8000a24:	bdb0      	pop	{r4, r5, r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	080030e8 	.word	0x080030e8
 8000a2c:	080030f8 	.word	0x080030f8

08000a30 <Validation_report_start>:
//}

// Validation Report functions

void Validation_report_start(uint8_t *data1,uint8_t *data2,uint8_t *data3,uint8_t *data4,uint8_t *data5 )
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b09e      	sub	sp, #120	; 0x78
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
	uint8_t subtitle1[] = "\nValidation Report: \n";
 8000a3e:	2560      	movs	r5, #96	; 0x60
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	4a53      	ldr	r2, [pc, #332]	; (8000b90 <Validation_report_start+0x160>)
 8000a44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a46:	c313      	stmia	r3!, {r0, r1, r4}
 8000a48:	ca03      	ldmia	r2!, {r0, r1}
 8000a4a:	c303      	stmia	r3!, {r0, r1}
 8000a4c:	8812      	ldrh	r2, [r2, #0]
 8000a4e:	801a      	strh	r2, [r3, #0]
	Vaccum_test_result_subtitle(subtitle1);
 8000a50:	197b      	adds	r3, r7, r5
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff ff56 	bl	8000904 <Vaccum_test_result_subtitle>
	uint8_t company_name[] = "\nCompany Name: ";
 8000a58:	2550      	movs	r5, #80	; 0x50
 8000a5a:	197b      	adds	r3, r7, r5
 8000a5c:	4a4d      	ldr	r2, [pc, #308]	; (8000b94 <Validation_report_start+0x164>)
 8000a5e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a60:	c313      	stmia	r3!, {r0, r1, r4}
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	601a      	str	r2, [r3, #0]
	UART_transfer(company_name,strlen(company_name));
 8000a66:	197b      	adds	r3, r7, r5
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff fb49 	bl	8000100 <strlen>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	197b      	adds	r3, r7, r5
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fe0e 	bl	8000698 <UART_transfer>
	UART_transfer(data1,strlen(data1));
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fb3e 	bl	8000100 <strlen>
 8000a84:	0003      	movs	r3, r0
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff fe03 	bl	8000698 <UART_transfer>
	uint8_t location[] = "Location: ";
 8000a92:	2444      	movs	r4, #68	; 0x44
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	4a40      	ldr	r2, [pc, #256]	; (8000b98 <Validation_report_start+0x168>)
 8000a98:	ca03      	ldmia	r2!, {r0, r1}
 8000a9a:	c303      	stmia	r3!, {r0, r1}
 8000a9c:	8811      	ldrh	r1, [r2, #0]
 8000a9e:	8019      	strh	r1, [r3, #0]
 8000aa0:	7892      	ldrb	r2, [r2, #2]
 8000aa2:	709a      	strb	r2, [r3, #2]
	UART_transfer(location,strlen(location));
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fb2a 	bl	8000100 <strlen>
 8000aac:	0003      	movs	r3, r0
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fdef 	bl	8000698 <UART_transfer>
	UART_transfer(data2,strlen(data2));
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff fb1f 	bl	8000100 <strlen>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fde4 	bl	8000698 <UART_transfer>
	uint8_t test_date[] = "Test Date: ";
 8000ad0:	2538      	movs	r5, #56	; 0x38
 8000ad2:	197b      	adds	r3, r7, r5
 8000ad4:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <Validation_report_start+0x16c>)
 8000ad6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ad8:	c313      	stmia	r3!, {r0, r1, r4}
	UART_transfer(test_date,strlen(test_date));
 8000ada:	002c      	movs	r4, r5
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fb0e 	bl	8000100 <strlen>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fdd3 	bl	8000698 <UART_transfer>
	UART_transfer(data3,strlen(data3));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff fb03 	bl	8000100 <strlen>
 8000afa:	0003      	movs	r3, r0
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff fdc8 	bl	8000698 <UART_transfer>
	uint8_t test_start_time[] = "Test start Time: ";
 8000b08:	2524      	movs	r5, #36	; 0x24
 8000b0a:	197b      	adds	r3, r7, r5
 8000b0c:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <Validation_report_start+0x170>)
 8000b0e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b10:	c313      	stmia	r3!, {r0, r1, r4}
 8000b12:	6811      	ldr	r1, [r2, #0]
 8000b14:	6019      	str	r1, [r3, #0]
 8000b16:	8892      	ldrh	r2, [r2, #4]
 8000b18:	809a      	strh	r2, [r3, #4]
	UART_transfer(test_start_time,strlen(test_start_time));
 8000b1a:	197b      	adds	r3, r7, r5
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff faef 	bl	8000100 <strlen>
 8000b22:	0003      	movs	r3, r0
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	197b      	adds	r3, r7, r5
 8000b28:	0011      	movs	r1, r2
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f7ff fdb4 	bl	8000698 <UART_transfer>
	UART_transfer(data4,strlen(data4));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff fae4 	bl	8000100 <strlen>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fda9 	bl	8000698 <UART_transfer>
	uint8_t test_end_time[] = "Test end Time: ";
 8000b46:	2514      	movs	r5, #20
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <Validation_report_start+0x174>)
 8000b4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b4e:	c313      	stmia	r3!, {r0, r1, r4}
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	601a      	str	r2, [r3, #0]
	UART_transfer(test_end_time,strlen(test_end_time));
 8000b54:	197b      	adds	r3, r7, r5
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fad2 	bl	8000100 <strlen>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	197b      	adds	r3, r7, r5
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff fd97 	bl	8000698 <UART_transfer>
	UART_transfer(data5,strlen(data5));
 8000b6a:	2488      	movs	r4, #136	; 0x88
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fac5 	bl	8000100 <strlen>
 8000b76:	0003      	movs	r3, r0
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff fd89 	bl	8000698 <UART_transfer>
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b01e      	add	sp, #120	; 0x78
 8000b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	08003158 	.word	0x08003158
 8000b94:	08003170 	.word	0x08003170
 8000b98:	08003180 	.word	0x08003180
 8000b9c:	0800318c 	.word	0x0800318c
 8000ba0:	08003198 	.word	0x08003198
 8000ba4:	080031ac 	.word	0x080031ac

08000ba8 <Validation_report_product_details>:

void Validation_report_product_details(uint8_t *data1,uint8_t *data2)
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	uint8_t subtitle2[] = "\nProduct details: \n";
 8000bb2:	2524      	movs	r5, #36	; 0x24
 8000bb4:	197b      	adds	r3, r7, r5
 8000bb6:	4a25      	ldr	r2, [pc, #148]	; (8000c4c <Validation_report_product_details+0xa4>)
 8000bb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000bba:	c313      	stmia	r3!, {r0, r1, r4}
 8000bbc:	ca03      	ldmia	r2!, {r0, r1}
 8000bbe:	c303      	stmia	r3!, {r0, r1}
	Vaccum_test_result_subtitle(subtitle2);
 8000bc0:	197b      	adds	r3, r7, r5
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff fe9e 	bl	8000904 <Vaccum_test_result_subtitle>
	Default_font();
 8000bc8:	f7ff fd7c 	bl	80006c4 <Default_font>
	uint8_t prod_name[] = "\nProd Name: ";
 8000bcc:	2514      	movs	r5, #20
 8000bce:	197b      	adds	r3, r7, r5
 8000bd0:	4a1f      	ldr	r2, [pc, #124]	; (8000c50 <Validation_report_product_details+0xa8>)
 8000bd2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000bd4:	c313      	stmia	r3!, {r0, r1, r4}
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	701a      	strb	r2, [r3, #0]
	UART_transfer(prod_name,strlen(prod_name));
 8000bda:	197b      	adds	r3, r7, r5
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fa8f 	bl	8000100 <strlen>
 8000be2:	0003      	movs	r3, r0
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	197b      	adds	r3, r7, r5
 8000be8:	0011      	movs	r1, r2
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fd54 	bl	8000698 <UART_transfer>
	UART_transfer(data1,strlen(data1));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fa84 	bl	8000100 <strlen>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff fd49 	bl	8000698 <UART_transfer>
	uint8_t prod_no[] = "Prod No.: ";
 8000c06:	2408      	movs	r4, #8
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <Validation_report_product_details+0xac>)
 8000c0c:	ca03      	ldmia	r2!, {r0, r1}
 8000c0e:	c303      	stmia	r3!, {r0, r1}
 8000c10:	8811      	ldrh	r1, [r2, #0]
 8000c12:	8019      	strh	r1, [r3, #0]
 8000c14:	7892      	ldrb	r2, [r2, #2]
 8000c16:	709a      	strb	r2, [r3, #2]
	UART_transfer(prod_no,strlen(prod_no));
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fa70 	bl	8000100 <strlen>
 8000c20:	0003      	movs	r3, r0
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff fd35 	bl	8000698 <UART_transfer>
	UART_transfer(data2,strlen(data2));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff fa65 	bl	8000100 <strlen>
 8000c36:	0003      	movs	r3, r0
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f7ff fd2a 	bl	8000698 <UART_transfer>


}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b00e      	add	sp, #56	; 0x38
 8000c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4c:	080031bc 	.word	0x080031bc
 8000c50:	080031d0 	.word	0x080031d0
 8000c54:	080031e0 	.word	0x080031e0

08000c58 <Validation_report_results>:

void Validation_report_results(uint8_t *data1,uint8_t *data2,uint8_t *data3,uint8_t *data4,uint8_t *data5,uint8_t *data6)
{
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b0a4      	sub	sp, #144	; 0x90
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	603b      	str	r3, [r7, #0]
	uint8_t subtitle3[] = "\nValidation Results: \n";
 8000c66:	2578      	movs	r5, #120	; 0x78
 8000c68:	197b      	adds	r3, r7, r5
 8000c6a:	4a66      	ldr	r2, [pc, #408]	; (8000e04 <Validation_report_results+0x1ac>)
 8000c6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c6e:	c313      	stmia	r3!, {r0, r1, r4}
 8000c70:	ca03      	ldmia	r2!, {r0, r1}
 8000c72:	c303      	stmia	r3!, {r0, r1}
 8000c74:	8811      	ldrh	r1, [r2, #0]
 8000c76:	8019      	strh	r1, [r3, #0]
 8000c78:	7892      	ldrb	r2, [r2, #2]
 8000c7a:	709a      	strb	r2, [r3, #2]
	Vaccum_test_result_subtitle(subtitle3);
 8000c7c:	197b      	adds	r3, r7, r5
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fe40 	bl	8000904 <Vaccum_test_result_subtitle>
	Default_font();
 8000c84:	f7ff fd1e 	bl	80006c4 <Default_font>
	uint8_t test_number[] = "\nTest Number: ";
 8000c88:	2568      	movs	r5, #104	; 0x68
 8000c8a:	197b      	adds	r3, r7, r5
 8000c8c:	4a5e      	ldr	r2, [pc, #376]	; (8000e08 <Validation_report_results+0x1b0>)
 8000c8e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c90:	c313      	stmia	r3!, {r0, r1, r4}
 8000c92:	8811      	ldrh	r1, [r2, #0]
 8000c94:	8019      	strh	r1, [r3, #0]
 8000c96:	7892      	ldrb	r2, [r2, #2]
 8000c98:	709a      	strb	r2, [r3, #2]
	UART_transfer(test_number,strlen(test_number));
 8000c9a:	197b      	adds	r3, r7, r5
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fa2f 	bl	8000100 <strlen>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	197b      	adds	r3, r7, r5
 8000ca8:	0011      	movs	r1, r2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fcf4 	bl	8000698 <UART_transfer>
	UART_transfer(data1,strlen(data1));
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff fa24 	bl	8000100 <strlen>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fce9 	bl	8000698 <UART_transfer>
	uint8_t input[] = "Input mmgh: ";
 8000cc6:	2558      	movs	r5, #88	; 0x58
 8000cc8:	197b      	adds	r3, r7, r5
 8000cca:	4a50      	ldr	r2, [pc, #320]	; (8000e0c <Validation_report_results+0x1b4>)
 8000ccc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000cce:	c313      	stmia	r3!, {r0, r1, r4}
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	701a      	strb	r2, [r3, #0]
	UART_transfer(input,strlen(input));
 8000cd4:	197b      	adds	r3, r7, r5
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff fa12 	bl	8000100 <strlen>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	197b      	adds	r3, r7, r5
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fcd7 	bl	8000698 <UART_transfer>
	UART_transfer(data2,strlen(data2));
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fa07 	bl	8000100 <strlen>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fccc 	bl	8000698 <UART_transfer>
	uint8_t maintained[] ="maintained mmhg: ";
 8000d00:	2544      	movs	r5, #68	; 0x44
 8000d02:	197b      	adds	r3, r7, r5
 8000d04:	4a42      	ldr	r2, [pc, #264]	; (8000e10 <Validation_report_results+0x1b8>)
 8000d06:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d08:	c313      	stmia	r3!, {r0, r1, r4}
 8000d0a:	6811      	ldr	r1, [r2, #0]
 8000d0c:	6019      	str	r1, [r3, #0]
 8000d0e:	8892      	ldrh	r2, [r2, #4]
 8000d10:	809a      	strh	r2, [r3, #4]
	UART_transfer(maintained,strlen(maintained));
 8000d12:	197b      	adds	r3, r7, r5
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff f9f3 	bl	8000100 <strlen>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	197b      	adds	r3, r7, r5
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fcb8 	bl	8000698 <UART_transfer>
	UART_transfer(data3,strlen(data3));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f7ff f9e8 	bl	8000100 <strlen>
 8000d30:	0003      	movs	r3, r0
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	0011      	movs	r1, r2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fcad 	bl	8000698 <UART_transfer>
	uint8_t meter[] ="\Meter mmhg: ";
 8000d3e:	2534      	movs	r5, #52	; 0x34
 8000d40:	197b      	adds	r3, r7, r5
 8000d42:	4a34      	ldr	r2, [pc, #208]	; (8000e14 <Validation_report_results+0x1bc>)
 8000d44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d46:	c313      	stmia	r3!, {r0, r1, r4}
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	701a      	strb	r2, [r3, #0]
	UART_transfer(meter,strlen(meter));
 8000d4c:	197b      	adds	r3, r7, r5
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff f9d6 	bl	8000100 <strlen>
 8000d54:	0003      	movs	r3, r0
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	197b      	adds	r3, r7, r5
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fc9b 	bl	8000698 <UART_transfer>
	UART_transfer(data4,strlen(data4));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff f9cb 	bl	8000100 <strlen>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff fc90 	bl	8000698 <UART_transfer>
	uint8_t difference[] ="Diff(+/-): ";
 8000d78:	2528      	movs	r5, #40	; 0x28
 8000d7a:	197b      	adds	r3, r7, r5
 8000d7c:	4a26      	ldr	r2, [pc, #152]	; (8000e18 <Validation_report_results+0x1c0>)
 8000d7e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d80:	c313      	stmia	r3!, {r0, r1, r4}
	UART_transfer(difference,strlen(difference));
 8000d82:	002c      	movs	r4, r5
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff f9ba 	bl	8000100 <strlen>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	0011      	movs	r1, r2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff fc7f 	bl	8000698 <UART_transfer>
	UART_transfer(data5,strlen(data5));
 8000d9a:	24a0      	movs	r4, #160	; 0xa0
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff f9ad 	bl	8000100 <strlen>
 8000da6:	0003      	movs	r3, r0
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff fc71 	bl	8000698 <UART_transfer>
	uint8_t results[] ="\nResults(pass/fail): ";
 8000db6:	2510      	movs	r5, #16
 8000db8:	197b      	adds	r3, r7, r5
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <Validation_report_results+0x1c4>)
 8000dbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000dbe:	c313      	stmia	r3!, {r0, r1, r4}
 8000dc0:	ca03      	ldmia	r2!, {r0, r1}
 8000dc2:	c303      	stmia	r3!, {r0, r1}
 8000dc4:	8812      	ldrh	r2, [r2, #0]
 8000dc6:	801a      	strh	r2, [r3, #0]
	UART_transfer(results,strlen(results));
 8000dc8:	197b      	adds	r3, r7, r5
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff f998 	bl	8000100 <strlen>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	197b      	adds	r3, r7, r5
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff fc5d 	bl	8000698 <UART_transfer>
	UART_transfer(data6,strlen(data6));
 8000dde:	24a4      	movs	r4, #164	; 0xa4
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff f98b 	bl	8000100 <strlen>
 8000dea:	0003      	movs	r3, r0
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff fc4f 	bl	8000698 <UART_transfer>

}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b024      	add	sp, #144	; 0x90
 8000e00:	bdb0      	pop	{r4, r5, r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	080031ec 	.word	0x080031ec
 8000e08:	08003204 	.word	0x08003204
 8000e0c:	08003214 	.word	0x08003214
 8000e10:	08003224 	.word	0x08003224
 8000e14:	08003238 	.word	0x08003238
 8000e18:	08003248 	.word	0x08003248
 8000e1c:	08003254 	.word	0x08003254

08000e20 <Validation_report_end>:
void Validation_report_end(uint8_t *data1,uint8_t *data2,uint8_t *data3)
{
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b090      	sub	sp, #64	; 0x40
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
	uint8_t performed_by[] = "\nPerformed by : ";
 8000e2c:	252c      	movs	r5, #44	; 0x2c
 8000e2e:	197b      	adds	r3, r7, r5
 8000e30:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <Validation_report_end+0xcc>)
 8000e32:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e34:	c313      	stmia	r3!, {r0, r1, r4}
 8000e36:	6811      	ldr	r1, [r2, #0]
 8000e38:	6019      	str	r1, [r3, #0]
 8000e3a:	7912      	ldrb	r2, [r2, #4]
 8000e3c:	711a      	strb	r2, [r3, #4]
	UART_transfer(performed_by,strlen(performed_by));
 8000e3e:	197b      	adds	r3, r7, r5
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff f95d 	bl	8000100 <strlen>
 8000e46:	0003      	movs	r3, r0
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	197b      	adds	r3, r7, r5
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff fc22 	bl	8000698 <UART_transfer>
	UART_transfer(data1,strlen(data1));
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff f952 	bl	8000100 <strlen>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff fc17 	bl	8000698 <UART_transfer>
	uint8_t verified_by[] = "\nVerified by : ";
 8000e6a:	251c      	movs	r5, #28
 8000e6c:	197b      	adds	r3, r7, r5
 8000e6e:	4a20      	ldr	r2, [pc, #128]	; (8000ef0 <Validation_report_end+0xd0>)
 8000e70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e72:	c313      	stmia	r3!, {r0, r1, r4}
 8000e74:	6812      	ldr	r2, [r2, #0]
 8000e76:	601a      	str	r2, [r3, #0]
	UART_transfer(verified_by,strlen(verified_by));
 8000e78:	197b      	adds	r3, r7, r5
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff f940 	bl	8000100 <strlen>
 8000e80:	0003      	movs	r3, r0
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	197b      	adds	r3, r7, r5
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fc05 	bl	8000698 <UART_transfer>
	UART_transfer(data2,strlen(data2));
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff f935 	bl	8000100 <strlen>
 8000e96:	0003      	movs	r3, r0
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff fbfa 	bl	8000698 <UART_transfer>
	uint8_t sign[] ="\nSign:";
 8000ea4:	2014      	movs	r0, #20
 8000ea6:	183b      	adds	r3, r7, r0
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <Validation_report_end+0xd4>)
 8000eaa:	6811      	ldr	r1, [r2, #0]
 8000eac:	6019      	str	r1, [r3, #0]
 8000eae:	8891      	ldrh	r1, [r2, #4]
 8000eb0:	8099      	strh	r1, [r3, #4]
 8000eb2:	7992      	ldrb	r2, [r2, #6]
 8000eb4:	719a      	strb	r2, [r3, #6]
	UART_transfer(sign,strlen(sign));
 8000eb6:	0004      	movs	r4, r0
 8000eb8:	183b      	adds	r3, r7, r0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff f920 	bl	8000100 <strlen>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff fbe5 	bl	8000698 <UART_transfer>
	UART_transfer(data3,strlen(data3));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff f915 	bl	8000100 <strlen>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0011      	movs	r1, r2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff fbda 	bl	8000698 <UART_transfer>

}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b010      	add	sp, #64	; 0x40
 8000eea:	bdb0      	pop	{r4, r5, r7, pc}
 8000eec:	0800312c 	.word	0x0800312c
 8000ef0:	08003140 	.word	0x08003140
 8000ef4:	08003150 	.word	0x08003150

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_MspInit+0x44>)
 8000f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_MspInit+0x44>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	430a      	orrs	r2, r1
 8000f08:	641a      	str	r2, [r3, #64]	; 0x40
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_MspInit+0x44>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4013      	ands	r3, r2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_MspInit+0x44>)
 8000f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_MspInit+0x44>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0549      	lsls	r1, r1, #21
 8000f20:	430a      	orrs	r2, r1
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_MspInit+0x44>)
 8000f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	055b      	lsls	r3, r3, #21
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b091      	sub	sp, #68	; 0x44
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	232c      	movs	r3, #44	; 0x2c
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	2314      	movs	r3, #20
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f001 ff3c 	bl	8002dd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	2414      	movs	r4, #20
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	2318      	movs	r3, #24
 8000f60:	001a      	movs	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	f001 ff34 	bl	8002dd0 <memset>
  if(huart->Instance==USART1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <HAL_UART_MspInit+0xb8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d13d      	bne.n	8000fee <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0018      	movs	r0, r3
 8000f82:	f001 f84d 	bl	8002020 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	1e03      	subs	r3, r0, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f8a:	f7ff fb7f 	bl	800068c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_UART_MspInit+0xbc>)
 8000f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <HAL_UART_MspInit+0xbc>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	01c9      	lsls	r1, r1, #7
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_UART_MspInit+0xbc>)
 8000f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	01db      	lsls	r3, r3, #7
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_UART_MspInit+0xbc>)
 8000fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_UART_MspInit+0xbc>)
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_UART_MspInit+0xbc>)
 8000fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fba:	2202      	movs	r2, #2
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000fc2:	212c      	movs	r1, #44	; 0x2c
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	22c0      	movs	r2, #192	; 0xc0
 8000fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2202      	movs	r2, #2
 8000fce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_UART_MspInit+0xc0>)
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	0010      	movs	r0, r2
 8000fea:	f000 f9af 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b011      	add	sp, #68	; 0x44
 8000ff4:	bd90      	pop	{r4, r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40021000 	.word	0x40021000
 8001000:	50000400 	.word	0x50000400

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f89c 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001040:	f7ff fff7 	bl	8001032 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800106a:	f001 feb9 	bl	8002de0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800106e:	f7ff f9c5 	bl	80003fc <main>

08001072 <LoopForever>:

LoopForever:
  b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   r0, =_estack
 8001074:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001080:	080032fc 	.word	0x080032fc
  ldr r2, =_sbss
 8001084:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001088:	200000c0 	.word	0x200000c0

0800108c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_IRQHandler>
	...

08001090 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_Init+0x3c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Init+0x3c>)
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0049      	lsls	r1, r1, #1
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	2003      	movs	r0, #3
 80010ac:	f000 f810 	bl	80010d0 <HAL_InitTick>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d003      	beq.n	80010bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e001      	b.n	80010c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010bc:	f7ff ff1c 	bl	8000ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	230f      	movs	r3, #15
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_InitTick+0x88>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d02b      	beq.n	8001140 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_InitTick+0x8c>)
 80010ea:	681c      	ldr	r4, [r3, #0]
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_InitTick+0x88>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	0019      	movs	r1, r3
 80010f2:	23fa      	movs	r3, #250	; 0xfa
 80010f4:	0098      	lsls	r0, r3, #2
 80010f6:	f7ff f80b 	bl	8000110 <__udivsi3>
 80010fa:	0003      	movs	r3, r0
 80010fc:	0019      	movs	r1, r3
 80010fe:	0020      	movs	r0, r4
 8001100:	f7ff f806 	bl	8000110 <__udivsi3>
 8001104:	0003      	movs	r3, r0
 8001106:	0018      	movs	r0, r3
 8001108:	f000 f913 	bl	8001332 <HAL_SYSTICK_Config>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d112      	bne.n	8001136 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d80a      	bhi.n	800112c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	2301      	movs	r3, #1
 800111a:	425b      	negs	r3, r3
 800111c:	2200      	movs	r2, #0
 800111e:	0018      	movs	r0, r3
 8001120:	f000 f8f2 	bl	8001308 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_InitTick+0x90>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e00d      	b.n	8001148 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e008      	b.n	8001148 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001136:	230f      	movs	r3, #15
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e003      	b.n	8001148 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001148:	230f      	movs	r3, #15
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	781b      	ldrb	r3, [r3, #0]
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b005      	add	sp, #20
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	20000008 	.word	0x20000008
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	001a      	movs	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	18d2      	adds	r2, r2, r3
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_IncTick+0x20>)
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000008 	.word	0x20000008
 8001184:	200000bc 	.word	0x200000bc

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	200000bc 	.word	0x200000bc

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fff0 	bl	8001188 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	001a      	movs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	189b      	adds	r3, r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	f7ff ffe0 	bl	8001188 <HAL_GetTick>
 80011c8:	0002      	movs	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	20000008 	.word	0x20000008

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	0002      	movs	r2, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b7f      	cmp	r3, #127	; 0x7f
 80011f8:	d828      	bhi.n	800124c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011fa:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <__NVIC_SetPriority+0xd4>)
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	33c0      	adds	r3, #192	; 0xc0
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	589b      	ldr	r3, [r3, r2]
 800120a:	1dfa      	adds	r2, r7, #7
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	0011      	movs	r1, r2
 8001210:	2203      	movs	r2, #3
 8001212:	400a      	ands	r2, r1
 8001214:	00d2      	lsls	r2, r2, #3
 8001216:	21ff      	movs	r1, #255	; 0xff
 8001218:	4091      	lsls	r1, r2
 800121a:	000a      	movs	r2, r1
 800121c:	43d2      	mvns	r2, r2
 800121e:	401a      	ands	r2, r3
 8001220:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	019b      	lsls	r3, r3, #6
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	401a      	ands	r2, r3
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	2303      	movs	r3, #3
 8001232:	4003      	ands	r3, r0
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001238:	481f      	ldr	r0, [pc, #124]	; (80012b8 <__NVIC_SetPriority+0xd4>)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b25b      	sxtb	r3, r3
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	430a      	orrs	r2, r1
 8001244:	33c0      	adds	r3, #192	; 0xc0
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800124a:	e031      	b.n	80012b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <__NVIC_SetPriority+0xd8>)
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	0019      	movs	r1, r3
 8001254:	230f      	movs	r3, #15
 8001256:	400b      	ands	r3, r1
 8001258:	3b08      	subs	r3, #8
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3306      	adds	r3, #6
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	18d3      	adds	r3, r2, r3
 8001262:	3304      	adds	r3, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	1dfa      	adds	r2, r7, #7
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	0011      	movs	r1, r2
 800126c:	2203      	movs	r2, #3
 800126e:	400a      	ands	r2, r1
 8001270:	00d2      	lsls	r2, r2, #3
 8001272:	21ff      	movs	r1, #255	; 0xff
 8001274:	4091      	lsls	r1, r2
 8001276:	000a      	movs	r2, r1
 8001278:	43d2      	mvns	r2, r2
 800127a:	401a      	ands	r2, r3
 800127c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	22ff      	movs	r2, #255	; 0xff
 8001284:	401a      	ands	r2, r3
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	0018      	movs	r0, r3
 800128c:	2303      	movs	r3, #3
 800128e:	4003      	ands	r3, r0
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <__NVIC_SetPriority+0xd8>)
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	001c      	movs	r4, r3
 800129c:	230f      	movs	r3, #15
 800129e:	4023      	ands	r3, r4
 80012a0:	3b08      	subs	r3, #8
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	430a      	orrs	r2, r1
 80012a6:	3306      	adds	r3, #6
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	18c3      	adds	r3, r0, r3
 80012ac:	3304      	adds	r3, #4
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b003      	add	sp, #12
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	1e5a      	subs	r2, r3, #1
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	045b      	lsls	r3, r3, #17
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d301      	bcc.n	80012d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d4:	2301      	movs	r3, #1
 80012d6:	e010      	b.n	80012fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <SysTick_Config+0x44>)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	3a01      	subs	r2, #1
 80012de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e0:	2301      	movs	r3, #1
 80012e2:	425b      	negs	r3, r3
 80012e4:	2103      	movs	r1, #3
 80012e6:	0018      	movs	r0, r3
 80012e8:	f7ff ff7c 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <SysTick_Config+0x44>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x44>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	210f      	movs	r1, #15
 8001314:	187b      	adds	r3, r7, r1
 8001316:	1c02      	adds	r2, r0, #0
 8001318:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	187b      	adds	r3, r7, r1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b25b      	sxtb	r3, r3
 8001322:	0011      	movs	r1, r2
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b004      	add	sp, #16
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ffbf 	bl	80012c0 <SysTick_Config>
 8001342:	0003      	movs	r3, r0
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e147      	b.n	80015ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4091      	lsls	r1, r2
 8001366:	000a      	movs	r2, r1
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d100      	bne.n	8001374 <HAL_GPIO_Init+0x28>
 8001372:	e138      	b.n	80015e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	4013      	ands	r3, r2
 800137c:	2b01      	cmp	r3, #1
 800137e:	d005      	beq.n	800138c <HAL_GPIO_Init+0x40>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	4013      	ands	r3, r2
 8001388:	2b02      	cmp	r3, #2
 800138a:	d130      	bne.n	80013ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	409a      	lsls	r2, r3
 800139a:	0013      	movs	r3, r2
 800139c:	43da      	mvns	r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	409a      	lsls	r2, r3
 80013ae:	0013      	movs	r3, r2
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013c2:	2201      	movs	r2, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
 80013c8:	0013      	movs	r3, r2
 80013ca:	43da      	mvns	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	2201      	movs	r2, #1
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d017      	beq.n	800142a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	409a      	lsls	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	43da      	mvns	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	4013      	ands	r3, r2
 8001432:	2b02      	cmp	r3, #2
 8001434:	d123      	bne.n	800147e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	58d3      	ldr	r3, [r2, r3]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2207      	movs	r2, #7
 8001448:	4013      	ands	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	43da      	mvns	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2107      	movs	r1, #7
 8001462:	400b      	ands	r3, r1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	6939      	ldr	r1, [r7, #16]
 800147c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	401a      	ands	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	23c0      	movs	r3, #192	; 0xc0
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	4013      	ands	r3, r2
 80014bc:	d100      	bne.n	80014c0 <HAL_GPIO_Init+0x174>
 80014be:	e092      	b.n	80015e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014c0:	4a50      	ldr	r2, [pc, #320]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3318      	adds	r3, #24
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	589b      	ldr	r3, [r3, r2]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2203      	movs	r2, #3
 80014d2:	4013      	ands	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	220f      	movs	r2, #15
 80014d8:	409a      	lsls	r2, r3
 80014da:	0013      	movs	r3, r2
 80014dc:	43da      	mvns	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	23a0      	movs	r3, #160	; 0xa0
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x1ca>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a45      	ldr	r2, [pc, #276]	; (8001608 <HAL_GPIO_Init+0x2bc>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00d      	beq.n	8001512 <HAL_GPIO_Init+0x1c6>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a44      	ldr	r2, [pc, #272]	; (800160c <HAL_GPIO_Init+0x2c0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d007      	beq.n	800150e <HAL_GPIO_Init+0x1c2>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a43      	ldr	r2, [pc, #268]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_GPIO_Init+0x1be>
 8001506:	2303      	movs	r3, #3
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x1cc>
 800150a:	2305      	movs	r3, #5
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x1cc>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x1cc>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x1cc>
 8001516:	2300      	movs	r3, #0
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	2103      	movs	r1, #3
 800151c:	400a      	ands	r2, r1
 800151e:	00d2      	lsls	r2, r2, #3
 8001520:	4093      	lsls	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001528:	4936      	ldr	r1, [pc, #216]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3318      	adds	r3, #24
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43da      	mvns	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	035b      	lsls	r3, r3, #13
 800154e:	4013      	ands	r3, r2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43da      	mvns	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	039b      	lsls	r3, r3, #14
 8001578:	4013      	ands	r3, r2
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800158a:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 800158c:	2384      	movs	r3, #132	; 0x84
 800158e:	58d3      	ldr	r3, [r2, r3]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43da      	mvns	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	029b      	lsls	r3, r3, #10
 80015a4:	4013      	ands	r3, r2
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015b0:	4914      	ldr	r1, [pc, #80]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 80015b2:	2284      	movs	r2, #132	; 0x84
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015b8:	4a12      	ldr	r2, [pc, #72]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	58d3      	ldr	r3, [r2, r3]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43da      	mvns	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4013      	ands	r3, r2
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015de:	4909      	ldr	r1, [pc, #36]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	40da      	lsrs	r2, r3
 80015f4:	1e13      	subs	r3, r2, #0
 80015f6:	d000      	beq.n	80015fa <HAL_GPIO_Init+0x2ae>
 80015f8:	e6b0      	b.n	800135c <HAL_GPIO_Init+0x10>
  }
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b006      	add	sp, #24
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021800 	.word	0x40021800
 8001608:	50000400 	.word	0x50000400
 800160c:	50000800 	.word	0x50000800
 8001610:	50000c00 	.word	0x50000c00

08001614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001622:	4013      	ands	r3, r2
 8001624:	0019      	movs	r1, r3
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	429a      	cmp	r2, r3
 8001636:	d11f      	bne.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	0013      	movs	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	189b      	adds	r3, r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4912      	ldr	r1, [pc, #72]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001646:	0018      	movs	r0, r3
 8001648:	f7fe fd62 	bl	8000110 <__udivsi3>
 800164c:	0003      	movs	r3, r0
 800164e:	3301      	adds	r3, #1
 8001650:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001652:	e008      	b.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b01      	subs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	e001      	b.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e009      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	401a      	ands	r2, r3
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	429a      	cmp	r2, r3
 8001676:	d0ed      	beq.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	b004      	add	sp, #16
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	40007000 	.word	0x40007000
 8001688:	fffff9ff 	.word	0xfffff9ff
 800168c:	20000000 	.word	0x20000000
 8001690:	000f4240 	.word	0x000f4240

08001694 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	23e0      	movs	r3, #224	; 0xe0
 800169e:	01db      	lsls	r3, r3, #7
 80016a0:	4013      	ands	r3, r2
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e2f3      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2201      	movs	r2, #1
 80016c4:	4013      	ands	r3, r2
 80016c6:	d100      	bne.n	80016ca <HAL_RCC_OscConfig+0x1e>
 80016c8:	e07c      	b.n	80017c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ca:	4bc3      	ldr	r3, [pc, #780]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2238      	movs	r2, #56	; 0x38
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d4:	4bc0      	ldr	r3, [pc, #768]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2203      	movs	r2, #3
 80016da:	4013      	ands	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b10      	cmp	r3, #16
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_OscConfig+0x3e>
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d002      	beq.n	80016f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d10b      	bne.n	8001708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	4bb9      	ldr	r3, [pc, #740]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	029b      	lsls	r3, r3, #10
 80016f8:	4013      	ands	r3, r2
 80016fa:	d062      	beq.n	80017c2 <HAL_RCC_OscConfig+0x116>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d15e      	bne.n	80017c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e2ce      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	025b      	lsls	r3, r3, #9
 8001710:	429a      	cmp	r2, r3
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x78>
 8001714:	4bb0      	ldr	r3, [pc, #704]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4baf      	ldr	r3, [pc, #700]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	0249      	lsls	r1, r1, #9
 800171e:	430a      	orrs	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e020      	b.n	8001766 <HAL_RCC_OscConfig+0xba>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	23a0      	movs	r3, #160	; 0xa0
 800172a:	02db      	lsls	r3, r3, #11
 800172c:	429a      	cmp	r2, r3
 800172e:	d10e      	bne.n	800174e <HAL_RCC_OscConfig+0xa2>
 8001730:	4ba9      	ldr	r3, [pc, #676]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4ba8      	ldr	r3, [pc, #672]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	02c9      	lsls	r1, r1, #11
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	4ba6      	ldr	r3, [pc, #664]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4ba5      	ldr	r3, [pc, #660]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	0249      	lsls	r1, r1, #9
 8001748:	430a      	orrs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e00b      	b.n	8001766 <HAL_RCC_OscConfig+0xba>
 800174e:	4ba2      	ldr	r3, [pc, #648]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4ba1      	ldr	r3, [pc, #644]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001754:	49a1      	ldr	r1, [pc, #644]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 8001756:	400a      	ands	r2, r1
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	4b9f      	ldr	r3, [pc, #636]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b9e      	ldr	r3, [pc, #632]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001760:	499f      	ldr	r1, [pc, #636]	; (80019e0 <HAL_RCC_OscConfig+0x334>)
 8001762:	400a      	ands	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d014      	beq.n	8001798 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7ff fd0b 	bl	8001188 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fd06 	bl	8001188 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e28d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178a:	4b93      	ldr	r3, [pc, #588]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	029b      	lsls	r3, r3, #10
 8001792:	4013      	ands	r3, r2
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0xcc>
 8001796:	e015      	b.n	80017c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fcf6 	bl	8001188 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a2:	f7ff fcf1 	bl	8001188 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	; 0x64
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e278      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b4:	4b88      	ldr	r3, [pc, #544]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	029b      	lsls	r3, r3, #10
 80017bc:	4013      	ands	r3, r2
 80017be:	d1f0      	bne.n	80017a2 <HAL_RCC_OscConfig+0xf6>
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d100      	bne.n	80017d0 <HAL_RCC_OscConfig+0x124>
 80017ce:	e099      	b.n	8001904 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d0:	4b81      	ldr	r3, [pc, #516]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2238      	movs	r2, #56	; 0x38
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017da:	4b7f      	ldr	r3, [pc, #508]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2203      	movs	r2, #3
 80017e0:	4013      	ands	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d102      	bne.n	80017f0 <HAL_RCC_OscConfig+0x144>
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d002      	beq.n	80017f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d135      	bne.n	8001862 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f6:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4013      	ands	r3, r2
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x162>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e24b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4a74      	ldr	r2, [pc, #464]	; (80019e4 <HAL_RCC_OscConfig+0x338>)
 8001814:	4013      	ands	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	021a      	lsls	r2, r3, #8
 800181e:	4b6e      	ldr	r3, [pc, #440]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d112      	bne.n	8001850 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800182a:	4b6b      	ldr	r3, [pc, #428]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6e      	ldr	r2, [pc, #440]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001830:	4013      	ands	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	4b67      	ldr	r3, [pc, #412]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800183e:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0adb      	lsrs	r3, r3, #11
 8001844:	2207      	movs	r2, #7
 8001846:	4013      	ands	r3, r2
 8001848:	4a68      	ldr	r2, [pc, #416]	; (80019ec <HAL_RCC_OscConfig+0x340>)
 800184a:	40da      	lsrs	r2, r3
 800184c:	4b68      	ldr	r3, [pc, #416]	; (80019f0 <HAL_RCC_OscConfig+0x344>)
 800184e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <HAL_RCC_OscConfig+0x348>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff fc3b 	bl	80010d0 <HAL_InitTick>
 800185a:	1e03      	subs	r3, r0, #0
 800185c:	d051      	beq.n	8001902 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e221      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d030      	beq.n	80018cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800186a:	4b5b      	ldr	r3, [pc, #364]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a5e      	ldr	r2, [pc, #376]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001870:	4013      	ands	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	4b57      	ldr	r3, [pc, #348]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800187e:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0049      	lsls	r1, r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fc7c 	bl	8001188 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff fc77 	bl	8001188 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1fe      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a8:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4013      	ands	r3, r2
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_RCC_OscConfig+0x338>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	021a      	lsls	r2, r3, #8
 80018c4:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	e01b      	b.n	8001904 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018cc:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018d2:	4949      	ldr	r1, [pc, #292]	; (80019f8 <HAL_RCC_OscConfig+0x34c>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc56 	bl	8001188 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fc51 	bl	8001188 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e1d8      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4013      	ands	r3, r2
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x236>
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001902:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2208      	movs	r2, #8
 800190a:	4013      	ands	r3, r2
 800190c:	d047      	beq.n	800199e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800190e:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2238      	movs	r2, #56	; 0x38
 8001914:	4013      	ands	r3, r2
 8001916:	2b18      	cmp	r3, #24
 8001918:	d10a      	bne.n	8001930 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d03c      	beq.n	800199e <HAL_RCC_OscConfig+0x2f2>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d138      	bne.n	800199e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e1ba      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d019      	beq.n	800196c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800193a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800193e:	2101      	movs	r1, #1
 8001940:	430a      	orrs	r2, r1
 8001942:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fc20 	bl	8001188 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff fc1b 	bl	8001188 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1a2      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d0f1      	beq.n	800194e <HAL_RCC_OscConfig+0x2a2>
 800196a:	e018      	b.n	800199e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800196e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001972:	2101      	movs	r1, #1
 8001974:	438a      	bics	r2, r1
 8001976:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff fc06 	bl	8001188 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001982:	f7ff fc01 	bl	8001188 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e188      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d1f1      	bne.n	8001982 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2204      	movs	r2, #4
 80019a4:	4013      	ands	r3, r2
 80019a6:	d100      	bne.n	80019aa <HAL_RCC_OscConfig+0x2fe>
 80019a8:	e0c6      	b.n	8001b38 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	231f      	movs	r3, #31
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2238      	movs	r2, #56	; 0x38
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d11e      	bne.n	80019fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d100      	bne.n	80019ca <HAL_RCC_OscConfig+0x31e>
 80019c8:	e0b6      	b.n	8001b38 <HAL_RCC_OscConfig+0x48c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d000      	beq.n	80019d4 <HAL_RCC_OscConfig+0x328>
 80019d2:	e0b1      	b.n	8001b38 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e166      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
 80019d8:	40021000 	.word	0x40021000
 80019dc:	fffeffff 	.word	0xfffeffff
 80019e0:	fffbffff 	.word	0xfffbffff
 80019e4:	ffff80ff 	.word	0xffff80ff
 80019e8:	ffffc7ff 	.word	0xffffc7ff
 80019ec:	00f42400 	.word	0x00f42400
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004
 80019f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019fc:	4bac      	ldr	r3, [pc, #688]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 80019fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	055b      	lsls	r3, r3, #21
 8001a04:	4013      	ands	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_OscConfig+0x360>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x362>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d011      	beq.n	8001a36 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4ba7      	ldr	r3, [pc, #668]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a16:	4ba6      	ldr	r3, [pc, #664]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	0549      	lsls	r1, r1, #21
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a20:	4ba3      	ldr	r3, [pc, #652]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	055b      	lsls	r3, r3, #21
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a2e:	231f      	movs	r3, #31
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a36:	4b9f      	ldr	r3, [pc, #636]	; (8001cb4 <HAL_RCC_OscConfig+0x608>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d11a      	bne.n	8001a78 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a42:	4b9c      	ldr	r3, [pc, #624]	; (8001cb4 <HAL_RCC_OscConfig+0x608>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b9b      	ldr	r3, [pc, #620]	; (8001cb4 <HAL_RCC_OscConfig+0x608>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0049      	lsls	r1, r1, #1
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb9a 	bl	8001188 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7ff fb95 	bl	8001188 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e11c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6c:	4b91      	ldr	r3, [pc, #580]	; (8001cb4 <HAL_RCC_OscConfig+0x608>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3e2>
 8001a80:	4b8b      	ldr	r3, [pc, #556]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a84:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a8c:	e01c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x41c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x404>
 8001a96:	4b86      	ldr	r3, [pc, #536]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001a98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a9a:	4b85      	ldr	r3, [pc, #532]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aa2:	4b83      	ldr	r3, [pc, #524]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001aa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aa6:	4b82      	ldr	r3, [pc, #520]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x41c>
 8001ab0:	4b7f      	ldr	r3, [pc, #508]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001ab2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab4:	4b7e      	ldr	r3, [pc, #504]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	438a      	bics	r2, r1
 8001aba:	65da      	str	r2, [r3, #92]	; 0x5c
 8001abc:	4b7c      	ldr	r3, [pc, #496]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001abe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ac0:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d014      	beq.n	8001afa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fb5a 	bl	8001188 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff fb55 	bl	8001188 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a74      	ldr	r2, [pc, #464]	; (8001cb8 <HAL_RCC_OscConfig+0x60c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0db      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aee:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x42e>
 8001af8:	e013      	b.n	8001b22 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff fb45 	bl	8001188 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b02:	e009      	b.n	8001b18 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff fb40 	bl	8001188 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	4a6a      	ldr	r2, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x60c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0c6      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b18:	4b65      	ldr	r3, [pc, #404]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b22:	231f      	movs	r3, #31
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b30:	4b5f      	ldr	r3, [pc, #380]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001b32:	4962      	ldr	r1, [pc, #392]	; (8001cbc <HAL_RCC_OscConfig+0x610>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d100      	bne.n	8001b42 <HAL_RCC_OscConfig+0x496>
 8001b40:	e0b0      	b.n	8001ca4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b42:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2238      	movs	r2, #56	; 0x38
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b10      	cmp	r3, #16
 8001b4c:	d100      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4a4>
 8001b4e:	e078      	b.n	8001c42 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d153      	bne.n	8001c00 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b55      	ldr	r3, [pc, #340]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001b5e:	4958      	ldr	r1, [pc, #352]	; (8001cc0 <HAL_RCC_OscConfig+0x614>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fb10 	bl	8001188 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff fb0b 	bl	8001188 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e092      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b80:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	049b      	lsls	r3, r3, #18
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8c:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4a4c      	ldr	r2, [pc, #304]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1a      	ldr	r2, [r3, #32]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bba:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	0449      	lsls	r1, r1, #17
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bc8:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	0549      	lsls	r1, r1, #21
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fad7 	bl	8001188 <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff fad2 	bl	8001188 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e059      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	049b      	lsls	r3, r3, #18
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x534>
 8001bfe:	e051      	b.n	8001ca4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001c06:	492e      	ldr	r1, [pc, #184]	; (8001cc0 <HAL_RCC_OscConfig+0x614>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fabc 	bl	8001188 <HAL_GetTick>
 8001c10:	0003      	movs	r3, r0
 8001c12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff fab7 	bl	8001188 <HAL_GetTick>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e03e      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	049b      	lsls	r3, r3, #18
 8001c30:	4013      	ands	r3, r2
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001c3a:	4923      	ldr	r1, [pc, #140]	; (8001cc8 <HAL_RCC_OscConfig+0x61c>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	e030      	b.n	8001ca4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e02b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_RCC_OscConfig+0x604>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2203      	movs	r2, #3
 8001c58:	401a      	ands	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d11e      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2270      	movs	r2, #112	; 0x70
 8001c66:	401a      	ands	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d117      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	23fe      	movs	r3, #254	; 0xfe
 8001c74:	01db      	lsls	r3, r3, #7
 8001c76:	401a      	ands	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d10e      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	23f8      	movs	r3, #248	; 0xf8
 8001c86:	039b      	lsls	r3, r3, #14
 8001c88:	401a      	ands	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d106      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	0f5b      	lsrs	r3, r3, #29
 8001c96:	075a      	lsls	r2, r3, #29
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b008      	add	sp, #32
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	00001388 	.word	0x00001388
 8001cbc:	efffffff 	.word	0xefffffff
 8001cc0:	feffffff 	.word	0xfeffffff
 8001cc4:	1fc1808c 	.word	0x1fc1808c
 8001cc8:	effefffc 	.word	0xeffefffc

08001ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0e9      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d91e      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b73      	ldr	r3, [pc, #460]	; (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d00:	f7ff fa42 	bl	8001188 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7ff fa3d 	bl	8001188 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a6a      	ldr	r2, [pc, #424]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0ca      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d1e:	4b67      	ldr	r3, [pc, #412]	; (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2207      	movs	r2, #7
 8001d24:	4013      	ands	r3, r2
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2202      	movs	r2, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d015      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d006      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d40:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d46:	21e0      	movs	r1, #224	; 0xe0
 8001d48:	01c9      	lsls	r1, r1, #7
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4e:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4a5d      	ldr	r2, [pc, #372]	; (8001ec8 <HAL_RCC_ClockConfig+0x1fc>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d057      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	029b      	lsls	r3, r3, #10
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d12b      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e097      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8c:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	049b      	lsls	r3, r3, #18
 8001d94:	4013      	ands	r3, r2
 8001d96:	d11f      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e08b      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da4:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4013      	ands	r3, r2
 8001dae:	d113      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e07f      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dbc:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d108      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e074      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dca:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e06d      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dd8:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2207      	movs	r2, #7
 8001dde:	4393      	bics	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dec:	f7ff f9cc 	bl	8001188 <HAL_GetTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df4:	e009      	b.n	8001e0a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df6:	f7ff f9c7 	bl	8001188 <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	4a2f      	ldr	r2, [pc, #188]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e054      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2238      	movs	r2, #56	; 0x38
 8001e10:	401a      	ands	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1ec      	bne.n	8001df6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2207      	movs	r2, #7
 8001e22:	4013      	ands	r3, r2
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d21e      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2207      	movs	r2, #7
 8001e30:	4393      	bics	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e3c:	f7ff f9a4 	bl	8001188 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e44:	e009      	b.n	8001e5a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7ff f99f 	bl	8001188 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e02c      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2207      	movs	r2, #7
 8001e60:	4013      	ands	r3, r2
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1ee      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <HAL_RCC_ClockConfig+0x200>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e86:	f000 f829 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e8a:	0001      	movs	r1, r0
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	220f      	movs	r2, #15
 8001e94:	401a      	ands	r2, r3
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_RCC_ClockConfig+0x204>)
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	58d3      	ldr	r3, [r2, r3]
 8001e9c:	221f      	movs	r2, #31
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	000a      	movs	r2, r1
 8001ea2:	40da      	lsrs	r2, r3
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x208>)
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_ClockConfig+0x20c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff f90f 	bl	80010d0 <HAL_InitTick>
 8001eb2:	0003      	movs	r3, r0
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b004      	add	sp, #16
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	00001388 	.word	0x00001388
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	fffff0ff 	.word	0xfffff0ff
 8001ecc:	ffff8fff 	.word	0xffff8fff
 8001ed0:	0800326c 	.word	0x0800326c
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee2:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2238      	movs	r2, #56	; 0x38
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d10f      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001eec:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0adb      	lsrs	r3, r3, #11
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	0013      	movs	r3, r2
 8001efc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001efe:	6839      	ldr	r1, [r7, #0]
 8001f00:	4835      	ldr	r0, [pc, #212]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f02:	f7fe f905 	bl	8000110 <__udivsi3>
 8001f06:	0003      	movs	r3, r0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e05d      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2238      	movs	r2, #56	; 0x38
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d102      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x100>)
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	e054      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2238      	movs	r2, #56	; 0x38
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d138      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d10d      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	4824      	ldr	r0, [pc, #144]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x100>)
 8001f4c:	f7fe f8e0 	bl	8000110 <__udivsi3>
 8001f50:	0003      	movs	r3, r0
 8001f52:	0019      	movs	r1, r3
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	227f      	movs	r2, #127	; 0x7f
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	434b      	muls	r3, r1
 8001f60:	617b      	str	r3, [r7, #20]
        break;
 8001f62:	e00d      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f68:	f7fe f8d2 	bl	8000110 <__udivsi3>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	0019      	movs	r1, r3
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	227f      	movs	r2, #127	; 0x7f
 8001f78:	4013      	ands	r3, r2
 8001f7a:	434b      	muls	r3, r1
 8001f7c:	617b      	str	r3, [r7, #20]
        break;
 8001f7e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0f5b      	lsrs	r3, r3, #29
 8001f86:	2207      	movs	r2, #7
 8001f88:	4013      	ands	r3, r2
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	6978      	ldr	r0, [r7, #20]
 8001f92:	f7fe f8bd 	bl	8000110 <__udivsi3>
 8001f96:	0003      	movs	r3, r0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e015      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2238      	movs	r2, #56	; 0x38
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d103      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2238      	movs	r2, #56	; 0x38
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b18      	cmp	r3, #24
 8001fba:	d103      	bne.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fbc:	23fa      	movs	r3, #250	; 0xfa
 8001fbe:	01db      	lsls	r3, r3, #7
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e001      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fc8:	693b      	ldr	r3, [r7, #16]
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b006      	add	sp, #24
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	00f42400 	.word	0x00f42400
 8001fdc:	007a1200 	.word	0x007a1200

08001fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ff8:	f7ff fff2 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8001ffc:	0004      	movs	r4, r0
 8001ffe:	f7ff fb49 	bl	8001694 <LL_RCC_GetAPB1Prescaler>
 8002002:	0003      	movs	r3, r0
 8002004:	0b1a      	lsrs	r2, r3, #12
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	58d3      	ldr	r3, [r2, r3]
 800200c:	221f      	movs	r2, #31
 800200e:	4013      	ands	r3, r2
 8002010:	40dc      	lsrs	r4, r3
 8002012:	0023      	movs	r3, r4
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	bdb0      	pop	{r4, r5, r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	080032ac 	.word	0x080032ac

08002020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002028:	2313      	movs	r3, #19
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002030:	2312      	movs	r3, #18
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	029b      	lsls	r3, r3, #10
 8002040:	4013      	ands	r3, r2
 8002042:	d100      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002044:	e0a3      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002046:	2011      	movs	r0, #17
 8002048:	183b      	adds	r3, r7, r0
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b7f      	ldr	r3, [pc, #508]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	055b      	lsls	r3, r3, #21
 8002056:	4013      	ands	r3, r2
 8002058:	d110      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b7c      	ldr	r3, [pc, #496]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800205c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205e:	4b7b      	ldr	r3, [pc, #492]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	0549      	lsls	r1, r1, #21
 8002064:	430a      	orrs	r2, r1
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
 8002068:	4b78      	ldr	r3, [pc, #480]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800206a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002076:	183b      	adds	r3, r7, r0
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800207c:	4b74      	ldr	r3, [pc, #464]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b73      	ldr	r3, [pc, #460]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	0049      	lsls	r1, r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800208a:	f7ff f87d 	bl	8001188 <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002092:	e00b      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002094:	f7ff f878 	bl	8001188 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d904      	bls.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020a2:	2313      	movs	r3, #19
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2203      	movs	r2, #3
 80020a8:	701a      	strb	r2, [r3, #0]
        break;
 80020aa:	e005      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ac:	4b68      	ldr	r3, [pc, #416]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4013      	ands	r3, r2
 80020b6:	d0ed      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020b8:	2313      	movs	r3, #19
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d154      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020c2:	4b62      	ldr	r3, [pc, #392]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d019      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d014      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020de:	4b5b      	ldr	r3, [pc, #364]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	4a5c      	ldr	r2, [pc, #368]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020e8:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020ec:	4b57      	ldr	r3, [pc, #348]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	0249      	lsls	r1, r1, #9
 80020f2:	430a      	orrs	r2, r1
 80020f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020f6:	4b55      	ldr	r3, [pc, #340]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020fa:	4b54      	ldr	r3, [pc, #336]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020fc:	4956      	ldr	r1, [pc, #344]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80020fe:	400a      	ands	r2, r1
 8002100:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002102:	4b52      	ldr	r3, [pc, #328]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2201      	movs	r2, #1
 800210c:	4013      	ands	r3, r2
 800210e:	d016      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7ff f83a 	bl	8001188 <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002118:	e00c      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7ff f835 	bl	8001188 <HAL_GetTick>
 800211e:	0002      	movs	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	4a4d      	ldr	r2, [pc, #308]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d904      	bls.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800212a:	2313      	movs	r3, #19
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	2203      	movs	r2, #3
 8002130:	701a      	strb	r2, [r3, #0]
            break;
 8002132:	e004      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002134:	4b45      	ldr	r3, [pc, #276]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d0ed      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800213e:	2313      	movs	r3, #19
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002148:	4b40      	ldr	r3, [pc, #256]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	4a41      	ldr	r2, [pc, #260]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800214e:	4013      	ands	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002158:	430a      	orrs	r2, r1
 800215a:	65da      	str	r2, [r3, #92]	; 0x5c
 800215c:	e00c      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800215e:	2312      	movs	r3, #18
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	2213      	movs	r2, #19
 8002164:	18ba      	adds	r2, r7, r2
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	701a      	strb	r2, [r3, #0]
 800216a:	e005      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800216c:	2312      	movs	r3, #18
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2213      	movs	r2, #19
 8002172:	18ba      	adds	r2, r7, r2
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002178:	2311      	movs	r3, #17
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002182:	4b32      	ldr	r3, [pc, #200]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002186:	4b31      	ldr	r3, [pc, #196]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002188:	4935      	ldr	r1, [pc, #212]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800218a:	400a      	ands	r2, r1
 800218c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2201      	movs	r2, #1
 8002194:	4013      	ands	r3, r2
 8002196:	d009      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002198:	4b2c      	ldr	r3, [pc, #176]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	2203      	movs	r2, #3
 800219e:	4393      	bics	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021a8:	430a      	orrs	r2, r1
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2220      	movs	r2, #32
 80021b2:	4013      	ands	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021b6:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80021bc:	4013      	ands	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	01db      	lsls	r3, r3, #7
 80021d2:	4013      	ands	r3, r2
 80021d4:	d015      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	0899      	lsrs	r1, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	05db      	lsls	r3, r3, #23
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d106      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	0249      	lsls	r1, r1, #9
 80021fe:	430a      	orrs	r2, r1
 8002200:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4013      	ands	r3, r2
 800220c:	d016      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800221e:	430a      	orrs	r2, r1
 8002220:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	01db      	lsls	r3, r3, #7
 800222a:	429a      	cmp	r2, r3
 800222c:	d106      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0249      	lsls	r1, r1, #9
 8002238:	430a      	orrs	r2, r1
 800223a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800223c:	2312      	movs	r3, #18
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	781b      	ldrb	r3, [r3, #0]
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b006      	add	sp, #24
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	fffffcff 	.word	0xfffffcff
 8002258:	fffeffff 	.word	0xfffeffff
 800225c:	00001388 	.word	0x00001388
 8002260:	efffffff 	.word	0xefffffff
 8002264:	ffffcfff 	.word	0xffffcfff
 8002268:	ffff3fff 	.word	0xffff3fff

0800226c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e046      	b.n	800230c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2288      	movs	r2, #136	; 0x88
 8002282:	589b      	ldr	r3, [r3, r2]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d107      	bne.n	8002298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2284      	movs	r2, #132	; 0x84
 800228c:	2100      	movs	r1, #0
 800228e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0018      	movs	r0, r3
 8002294:	f7fe fe54 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2288      	movs	r2, #136	; 0x88
 800229c:	2124      	movs	r1, #36	; 0x24
 800229e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	438a      	bics	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 fa3a 	bl	8002734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 f8cc 	bl	8002460 <UART_SetConfig>
 80022c8:	0003      	movs	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e01c      	b.n	800230c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	490d      	ldr	r1, [pc, #52]	; (8002314 <HAL_UART_Init+0xa8>)
 80022de:	400a      	ands	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	212a      	movs	r1, #42	; 0x2a
 80022ee:	438a      	bics	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f000 fac9 	bl	800289c <UART_CheckIdleState>
 800230a:	0003      	movs	r3, r0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}
 8002314:	ffffb7ff 	.word	0xffffb7ff

08002318 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	1dbb      	adds	r3, r7, #6
 8002326:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2288      	movs	r2, #136	; 0x88
 800232c:	589b      	ldr	r3, [r3, r2]
 800232e:	2b20      	cmp	r3, #32
 8002330:	d000      	beq.n	8002334 <HAL_UART_Transmit+0x1c>
 8002332:	e090      	b.n	8002456 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_UART_Transmit+0x2a>
 800233a:	1dbb      	adds	r3, r7, #6
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e088      	b.n	8002458 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	015b      	lsls	r3, r3, #5
 800234e:	429a      	cmp	r2, r3
 8002350:	d109      	bne.n	8002366 <HAL_UART_Transmit+0x4e>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2201      	movs	r2, #1
 800235e:	4013      	ands	r3, r2
 8002360:	d001      	beq.n	8002366 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e078      	b.n	8002458 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2290      	movs	r2, #144	; 0x90
 800236a:	2100      	movs	r1, #0
 800236c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2288      	movs	r2, #136	; 0x88
 8002372:	2121      	movs	r1, #33	; 0x21
 8002374:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002376:	f7fe ff07 	bl	8001188 <HAL_GetTick>
 800237a:	0003      	movs	r3, r0
 800237c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1dba      	adds	r2, r7, #6
 8002382:	2154      	movs	r1, #84	; 0x54
 8002384:	8812      	ldrh	r2, [r2, #0]
 8002386:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1dba      	adds	r2, r7, #6
 800238c:	2156      	movs	r1, #86	; 0x56
 800238e:	8812      	ldrh	r2, [r2, #0]
 8002390:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	015b      	lsls	r3, r3, #5
 800239a:	429a      	cmp	r2, r3
 800239c:	d108      	bne.n	80023b0 <HAL_UART_Transmit+0x98>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	e003      	b.n	80023b8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023b8:	e030      	b.n	800241c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	0013      	movs	r3, r2
 80023c4:	2200      	movs	r2, #0
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	f000 fb12 	bl	80029f0 <UART_WaitOnFlagUntilTimeout>
 80023cc:	1e03      	subs	r3, r0, #0
 80023ce:	d005      	beq.n	80023dc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2288      	movs	r2, #136	; 0x88
 80023d4:	2120      	movs	r1, #32
 80023d6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e03d      	b.n	8002458 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	001a      	movs	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	05d2      	lsls	r2, r2, #23
 80023ee:	0dd2      	lsrs	r2, r2, #23
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3302      	adds	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	e007      	b.n	800240a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	3301      	adds	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2256      	movs	r2, #86	; 0x56
 800240e:	5a9b      	ldrh	r3, [r3, r2]
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b299      	uxth	r1, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2256      	movs	r2, #86	; 0x56
 800241a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2256      	movs	r2, #86	; 0x56
 8002420:	5a9b      	ldrh	r3, [r3, r2]
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1c8      	bne.n	80023ba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	0013      	movs	r3, r2
 8002432:	2200      	movs	r2, #0
 8002434:	2140      	movs	r1, #64	; 0x40
 8002436:	f000 fadb 	bl	80029f0 <UART_WaitOnFlagUntilTimeout>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d005      	beq.n	800244a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2288      	movs	r2, #136	; 0x88
 8002442:	2120      	movs	r1, #32
 8002444:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e006      	b.n	8002458 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2288      	movs	r2, #136	; 0x88
 800244e:	2120      	movs	r1, #32
 8002450:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
  }
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b008      	add	sp, #32
 800245e:	bd80      	pop	{r7, pc}

08002460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002468:	231a      	movs	r3, #26
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	4313      	orrs	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4aa1      	ldr	r2, [pc, #644]	; (8002714 <UART_SetConfig+0x2b4>)
 8002490:	4013      	ands	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a9c      	ldr	r2, [pc, #624]	; (8002718 <UART_SetConfig+0x2b8>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a93      	ldr	r2, [pc, #588]	; (800271c <UART_SetConfig+0x2bc>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	220f      	movs	r2, #15
 80024e4:	4393      	bics	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a89      	ldr	r2, [pc, #548]	; (8002720 <UART_SetConfig+0x2c0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d127      	bne.n	800254e <UART_SetConfig+0xee>
 80024fe:	4b89      	ldr	r3, [pc, #548]	; (8002724 <UART_SetConfig+0x2c4>)
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	2203      	movs	r2, #3
 8002504:	4013      	ands	r3, r2
 8002506:	2b03      	cmp	r3, #3
 8002508:	d017      	beq.n	800253a <UART_SetConfig+0xda>
 800250a:	d81b      	bhi.n	8002544 <UART_SetConfig+0xe4>
 800250c:	2b02      	cmp	r3, #2
 800250e:	d00a      	beq.n	8002526 <UART_SetConfig+0xc6>
 8002510:	d818      	bhi.n	8002544 <UART_SetConfig+0xe4>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <UART_SetConfig+0xbc>
 8002516:	2b01      	cmp	r3, #1
 8002518:	d00a      	beq.n	8002530 <UART_SetConfig+0xd0>
 800251a:	e013      	b.n	8002544 <UART_SetConfig+0xe4>
 800251c:	231b      	movs	r3, #27
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e021      	b.n	800256a <UART_SetConfig+0x10a>
 8002526:	231b      	movs	r3, #27
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2202      	movs	r2, #2
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e01c      	b.n	800256a <UART_SetConfig+0x10a>
 8002530:	231b      	movs	r3, #27
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2204      	movs	r2, #4
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e017      	b.n	800256a <UART_SetConfig+0x10a>
 800253a:	231b      	movs	r3, #27
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2208      	movs	r2, #8
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e012      	b.n	800256a <UART_SetConfig+0x10a>
 8002544:	231b      	movs	r3, #27
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2210      	movs	r2, #16
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e00d      	b.n	800256a <UART_SetConfig+0x10a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a75      	ldr	r2, [pc, #468]	; (8002728 <UART_SetConfig+0x2c8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d104      	bne.n	8002562 <UART_SetConfig+0x102>
 8002558:	231b      	movs	r3, #27
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e003      	b.n	800256a <UART_SetConfig+0x10a>
 8002562:	231b      	movs	r3, #27
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2210      	movs	r2, #16
 8002568:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	429a      	cmp	r2, r3
 8002574:	d000      	beq.n	8002578 <UART_SetConfig+0x118>
 8002576:	e065      	b.n	8002644 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002578:	231b      	movs	r3, #27
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d015      	beq.n	80025ae <UART_SetConfig+0x14e>
 8002582:	dc18      	bgt.n	80025b6 <UART_SetConfig+0x156>
 8002584:	2b04      	cmp	r3, #4
 8002586:	d00d      	beq.n	80025a4 <UART_SetConfig+0x144>
 8002588:	dc15      	bgt.n	80025b6 <UART_SetConfig+0x156>
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <UART_SetConfig+0x134>
 800258e:	2b02      	cmp	r3, #2
 8002590:	d005      	beq.n	800259e <UART_SetConfig+0x13e>
 8002592:	e010      	b.n	80025b6 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002594:	f7ff fd2e 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8002598:	0003      	movs	r3, r0
 800259a:	617b      	str	r3, [r7, #20]
        break;
 800259c:	e012      	b.n	80025c4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <UART_SetConfig+0x2cc>)
 80025a0:	617b      	str	r3, [r7, #20]
        break;
 80025a2:	e00f      	b.n	80025c4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025a4:	f7ff fc9a 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 80025a8:	0003      	movs	r3, r0
 80025aa:	617b      	str	r3, [r7, #20]
        break;
 80025ac:	e00a      	b.n	80025c4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	617b      	str	r3, [r7, #20]
        break;
 80025b4:	e006      	b.n	80025c4 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025ba:	231a      	movs	r3, #26
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
        break;
 80025c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d100      	bne.n	80025cc <UART_SetConfig+0x16c>
 80025ca:	e08d      	b.n	80026e8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d0:	4b57      	ldr	r3, [pc, #348]	; (8002730 <UART_SetConfig+0x2d0>)
 80025d2:	0052      	lsls	r2, r2, #1
 80025d4:	5ad3      	ldrh	r3, [r2, r3]
 80025d6:	0019      	movs	r1, r3
 80025d8:	6978      	ldr	r0, [r7, #20]
 80025da:	f7fd fd99 	bl	8000110 <__udivsi3>
 80025de:	0003      	movs	r3, r0
 80025e0:	005a      	lsls	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	18d2      	adds	r2, r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	0019      	movs	r1, r3
 80025f0:	0010      	movs	r0, r2
 80025f2:	f7fd fd8d 	bl	8000110 <__udivsi3>
 80025f6:	0003      	movs	r3, r0
 80025f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b0f      	cmp	r3, #15
 80025fe:	d91c      	bls.n	800263a <UART_SetConfig+0x1da>
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	025b      	lsls	r3, r3, #9
 8002606:	429a      	cmp	r2, r3
 8002608:	d217      	bcs.n	800263a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	b29a      	uxth	r2, r3
 800260e:	200e      	movs	r0, #14
 8002610:	183b      	adds	r3, r7, r0
 8002612:	210f      	movs	r1, #15
 8002614:	438a      	bics	r2, r1
 8002616:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	b29b      	uxth	r3, r3
 800261e:	2207      	movs	r2, #7
 8002620:	4013      	ands	r3, r2
 8002622:	b299      	uxth	r1, r3
 8002624:	183b      	adds	r3, r7, r0
 8002626:	183a      	adds	r2, r7, r0
 8002628:	8812      	ldrh	r2, [r2, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	183a      	adds	r2, r7, r0
 8002634:	8812      	ldrh	r2, [r2, #0]
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	e056      	b.n	80026e8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800263a:	231a      	movs	r3, #26
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e051      	b.n	80026e8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002644:	231b      	movs	r3, #27
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b08      	cmp	r3, #8
 800264c:	d015      	beq.n	800267a <UART_SetConfig+0x21a>
 800264e:	dc18      	bgt.n	8002682 <UART_SetConfig+0x222>
 8002650:	2b04      	cmp	r3, #4
 8002652:	d00d      	beq.n	8002670 <UART_SetConfig+0x210>
 8002654:	dc15      	bgt.n	8002682 <UART_SetConfig+0x222>
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <UART_SetConfig+0x200>
 800265a:	2b02      	cmp	r3, #2
 800265c:	d005      	beq.n	800266a <UART_SetConfig+0x20a>
 800265e:	e010      	b.n	8002682 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002660:	f7ff fcc8 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8002664:	0003      	movs	r3, r0
 8002666:	617b      	str	r3, [r7, #20]
        break;
 8002668:	e012      	b.n	8002690 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800266a:	4b30      	ldr	r3, [pc, #192]	; (800272c <UART_SetConfig+0x2cc>)
 800266c:	617b      	str	r3, [r7, #20]
        break;
 800266e:	e00f      	b.n	8002690 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002670:	f7ff fc34 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8002674:	0003      	movs	r3, r0
 8002676:	617b      	str	r3, [r7, #20]
        break;
 8002678:	e00a      	b.n	8002690 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	617b      	str	r3, [r7, #20]
        break;
 8002680:	e006      	b.n	8002690 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002686:	231a      	movs	r3, #26
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
        break;
 800268e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d028      	beq.n	80026e8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <UART_SetConfig+0x2d0>)
 800269c:	0052      	lsls	r2, r2, #1
 800269e:	5ad3      	ldrh	r3, [r2, r3]
 80026a0:	0019      	movs	r1, r3
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7fd fd34 	bl	8000110 <__udivsi3>
 80026a8:	0003      	movs	r3, r0
 80026aa:	001a      	movs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	18d2      	adds	r2, r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	0019      	movs	r1, r3
 80026ba:	0010      	movs	r0, r2
 80026bc:	f7fd fd28 	bl	8000110 <__udivsi3>
 80026c0:	0003      	movs	r3, r0
 80026c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b0f      	cmp	r3, #15
 80026c8:	d90a      	bls.n	80026e0 <UART_SetConfig+0x280>
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	025b      	lsls	r3, r3, #9
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d205      	bcs.n	80026e0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	e003      	b.n	80026e8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80026e0:	231a      	movs	r3, #26
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	226a      	movs	r2, #106	; 0x6a
 80026ec:	2101      	movs	r1, #1
 80026ee:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2268      	movs	r2, #104	; 0x68
 80026f4:	2101      	movs	r1, #1
 80026f6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002704:	231a      	movs	r3, #26
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b008      	add	sp, #32
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	cfff69f3 	.word	0xcfff69f3
 8002718:	ffffcfff 	.word	0xffffcfff
 800271c:	11fff4ff 	.word	0x11fff4ff
 8002720:	40013800 	.word	0x40013800
 8002724:	40021000 	.word	0x40021000
 8002728:	40004400 	.word	0x40004400
 800272c:	00f42400 	.word	0x00f42400
 8002730:	080032cc 	.word	0x080032cc

08002734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	2208      	movs	r2, #8
 8002742:	4013      	ands	r3, r2
 8002744:	d00b      	beq.n	800275e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a4a      	ldr	r2, [pc, #296]	; (8002878 <UART_AdvFeatureConfig+0x144>)
 800274e:	4013      	ands	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	2201      	movs	r2, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d00b      	beq.n	8002780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a43      	ldr	r2, [pc, #268]	; (800287c <UART_AdvFeatureConfig+0x148>)
 8002770:	4013      	ands	r3, r2
 8002772:	0019      	movs	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d00b      	beq.n	80027a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a3b      	ldr	r2, [pc, #236]	; (8002880 <UART_AdvFeatureConfig+0x14c>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	2204      	movs	r2, #4
 80027a8:	4013      	ands	r3, r2
 80027aa:	d00b      	beq.n	80027c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a34      	ldr	r2, [pc, #208]	; (8002884 <UART_AdvFeatureConfig+0x150>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	2210      	movs	r2, #16
 80027ca:	4013      	ands	r3, r2
 80027cc:	d00b      	beq.n	80027e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a2c      	ldr	r2, [pc, #176]	; (8002888 <UART_AdvFeatureConfig+0x154>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	2220      	movs	r2, #32
 80027ec:	4013      	ands	r3, r2
 80027ee:	d00b      	beq.n	8002808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4a25      	ldr	r2, [pc, #148]	; (800288c <UART_AdvFeatureConfig+0x158>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	2240      	movs	r2, #64	; 0x40
 800280e:	4013      	ands	r3, r2
 8002810:	d01d      	beq.n	800284e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <UART_AdvFeatureConfig+0x15c>)
 800281a:	4013      	ands	r3, r2
 800281c:	0019      	movs	r1, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	035b      	lsls	r3, r3, #13
 8002832:	429a      	cmp	r2, r3
 8002834:	d10b      	bne.n	800284e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <UART_AdvFeatureConfig+0x160>)
 800283e:	4013      	ands	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	4013      	ands	r3, r2
 8002856:	d00b      	beq.n	8002870 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <UART_AdvFeatureConfig+0x164>)
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
  }
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}
 8002878:	ffff7fff 	.word	0xffff7fff
 800287c:	fffdffff 	.word	0xfffdffff
 8002880:	fffeffff 	.word	0xfffeffff
 8002884:	fffbffff 	.word	0xfffbffff
 8002888:	ffffefff 	.word	0xffffefff
 800288c:	ffffdfff 	.word	0xffffdfff
 8002890:	ffefffff 	.word	0xffefffff
 8002894:	ff9fffff 	.word	0xff9fffff
 8002898:	fff7ffff 	.word	0xfff7ffff

0800289c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b092      	sub	sp, #72	; 0x48
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2290      	movs	r2, #144	; 0x90
 80028a8:	2100      	movs	r1, #0
 80028aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028ac:	f7fe fc6c 	bl	8001188 <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2208      	movs	r2, #8
 80028bc:	4013      	ands	r3, r2
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d12d      	bne.n	800291e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	0391      	lsls	r1, r2, #14
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4a47      	ldr	r2, [pc, #284]	; (80029e8 <UART_CheckIdleState+0x14c>)
 80028cc:	9200      	str	r2, [sp, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f000 f88e 	bl	80029f0 <UART_WaitOnFlagUntilTimeout>
 80028d4:	1e03      	subs	r3, r0, #0
 80028d6:	d022      	beq.n	800291e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d8:	f3ef 8310 	mrs	r3, PRIMASK
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80028e2:	2301      	movs	r3, #1
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	f383 8810 	msr	PRIMASK, r3
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	438a      	bics	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	f383 8810 	msr	PRIMASK, r3
}
 8002908:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2288      	movs	r2, #136	; 0x88
 800290e:	2120      	movs	r1, #32
 8002910:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2284      	movs	r2, #132	; 0x84
 8002916:	2100      	movs	r1, #0
 8002918:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e060      	b.n	80029e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2204      	movs	r2, #4
 8002926:	4013      	ands	r3, r2
 8002928:	2b04      	cmp	r3, #4
 800292a:	d146      	bne.n	80029ba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800292c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	03d1      	lsls	r1, r2, #15
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4a2c      	ldr	r2, [pc, #176]	; (80029e8 <UART_CheckIdleState+0x14c>)
 8002936:	9200      	str	r2, [sp, #0]
 8002938:	2200      	movs	r2, #0
 800293a:	f000 f859 	bl	80029f0 <UART_WaitOnFlagUntilTimeout>
 800293e:	1e03      	subs	r3, r0, #0
 8002940:	d03b      	beq.n	80029ba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002942:	f3ef 8310 	mrs	r3, PRIMASK
 8002946:	60fb      	str	r3, [r7, #12]
  return(result);
 8002948:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f383 8810 	msr	PRIMASK, r3
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4922      	ldr	r1, [pc, #136]	; (80029ec <UART_CheckIdleState+0x150>)
 8002964:	400a      	ands	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f383 8810 	msr	PRIMASK, r3
}
 8002972:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002974:	f3ef 8310 	mrs	r3, PRIMASK
 8002978:	61bb      	str	r3, [r7, #24]
  return(result);
 800297a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
 800297e:	2301      	movs	r3, #1
 8002980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f383 8810 	msr	PRIMASK, r3
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	438a      	bics	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	228c      	movs	r2, #140	; 0x8c
 80029aa:	2120      	movs	r1, #32
 80029ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2284      	movs	r2, #132	; 0x84
 80029b2:	2100      	movs	r1, #0
 80029b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e012      	b.n	80029e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2288      	movs	r2, #136	; 0x88
 80029be:	2120      	movs	r1, #32
 80029c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	228c      	movs	r2, #140	; 0x8c
 80029c6:	2120      	movs	r1, #32
 80029c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2284      	movs	r2, #132	; 0x84
 80029da:	2100      	movs	r1, #0
 80029dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b010      	add	sp, #64	; 0x40
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	01ffffff 	.word	0x01ffffff
 80029ec:	fffffedf 	.word	0xfffffedf

080029f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a00:	e051      	b.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	3301      	adds	r3, #1
 8002a06:	d04e      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a08:	f7fe fbbe 	bl	8001188 <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d302      	bcc.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e051      	b.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d03b      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b80      	cmp	r3, #128	; 0x80
 8002a32:	d038      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d035      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2208      	movs	r2, #8
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d111      	bne.n	8002a6c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 f83c 	bl	8002ad0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2290      	movs	r2, #144	; 0x90
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2284      	movs	r2, #132	; 0x84
 8002a64:	2100      	movs	r1, #0
 8002a66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e02c      	b.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	401a      	ands	r2, r3
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d112      	bne.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 f81f 	bl	8002ad0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2290      	movs	r2, #144	; 0x90
 8002a96:	2120      	movs	r1, #32
 8002a98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2284      	movs	r2, #132	; 0x84
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e00f      	b.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	425a      	negs	r2, r3
 8002ab6:	4153      	adcs	r3, r2
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	001a      	movs	r2, r3
 8002abc:	1dfb      	adds	r3, r7, #7
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d09e      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b004      	add	sp, #16
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08e      	sub	sp, #56	; 0x38
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8002adc:	617b      	str	r3, [r7, #20]
  return(result);
 8002ade:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f383 8810 	msr	PRIMASK, r3
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4926      	ldr	r1, [pc, #152]	; (8002b94 <UART_EndRxTransfer+0xc4>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f383 8810 	msr	PRIMASK, r3
}
 8002b08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0e:	623b      	str	r3, [r7, #32]
  return(result);
 8002b10:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
 8002b14:	2301      	movs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	f383 8810 	msr	PRIMASK, r3
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	491b      	ldr	r1, [pc, #108]	; (8002b98 <UART_EndRxTransfer+0xc8>)
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	f383 8810 	msr	PRIMASK, r3
}
 8002b3a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d118      	bne.n	8002b76 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b44:	f3ef 8310 	mrs	r3, PRIMASK
 8002b48:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4e:	2301      	movs	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f383 8810 	msr	PRIMASK, r3
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2110      	movs	r1, #16
 8002b66:	438a      	bics	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f383 8810 	msr	PRIMASK, r3
}
 8002b74:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	228c      	movs	r2, #140	; 0x8c
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b00e      	add	sp, #56	; 0x38
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	fffffedf 	.word	0xfffffedf
 8002b98:	effffffe 	.word	0xeffffffe

08002b9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2284      	movs	r2, #132	; 0x84
 8002ba8:	5c9b      	ldrb	r3, [r3, r2]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e027      	b.n	8002c02 <HAL_UARTEx_DisableFifoMode+0x66>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2284      	movs	r2, #132	; 0x84
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2288      	movs	r2, #136	; 0x88
 8002bbe:	2124      	movs	r1, #36	; 0x24
 8002bc0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	438a      	bics	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <HAL_UARTEx_DisableFifoMode+0x70>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2288      	movs	r2, #136	; 0x88
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2284      	movs	r2, #132	; 0x84
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b004      	add	sp, #16
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	dfffffff 	.word	0xdfffffff

08002c10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2284      	movs	r2, #132	; 0x84
 8002c1e:	5c9b      	ldrb	r3, [r3, r2]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e02e      	b.n	8002c86 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2284      	movs	r2, #132	; 0x84
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2288      	movs	r2, #136	; 0x88
 8002c34:	2124      	movs	r1, #36	; 0x24
 8002c36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	08d9      	lsrs	r1, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 f854 	bl	8002d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2288      	movs	r2, #136	; 0x88
 8002c78:	2120      	movs	r1, #32
 8002c7a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2284      	movs	r2, #132	; 0x84
 8002c80:	2100      	movs	r1, #0
 8002c82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2284      	movs	r2, #132	; 0x84
 8002c9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e02f      	b.n	8002d08 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2284      	movs	r2, #132	; 0x84
 8002cac:	2101      	movs	r1, #1
 8002cae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2288      	movs	r2, #136	; 0x88
 8002cb4:	2124      	movs	r1, #36	; 0x24
 8002cb6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2101      	movs	r1, #1
 8002ccc:	438a      	bics	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	0019      	movs	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 f813 	bl	8002d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2288      	movs	r2, #136	; 0x88
 8002cfa:	2120      	movs	r1, #32
 8002cfc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2284      	movs	r2, #132	; 0x84
 8002d02:	2100      	movs	r1, #0
 8002d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b004      	add	sp, #16
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	f1ffffff 	.word	0xf1ffffff

08002d14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d108      	bne.n	8002d36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	226a      	movs	r2, #106	; 0x6a
 8002d28:	2101      	movs	r1, #1
 8002d2a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2268      	movs	r2, #104	; 0x68
 8002d30:	2101      	movs	r1, #1
 8002d32:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d34:	e043      	b.n	8002dbe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d36:	260f      	movs	r6, #15
 8002d38:	19bb      	adds	r3, r7, r6
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d3e:	200e      	movs	r0, #14
 8002d40:	183b      	adds	r3, r7, r0
 8002d42:	2208      	movs	r2, #8
 8002d44:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	0e5b      	lsrs	r3, r3, #25
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	240d      	movs	r4, #13
 8002d52:	193b      	adds	r3, r7, r4
 8002d54:	2107      	movs	r1, #7
 8002d56:	400a      	ands	r2, r1
 8002d58:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	0f5b      	lsrs	r3, r3, #29
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	250c      	movs	r5, #12
 8002d66:	197b      	adds	r3, r7, r5
 8002d68:	2107      	movs	r1, #7
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d6e:	183b      	adds	r3, r7, r0
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	197a      	adds	r2, r7, r5
 8002d74:	7812      	ldrb	r2, [r2, #0]
 8002d76:	4914      	ldr	r1, [pc, #80]	; (8002dc8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002d78:	5c8a      	ldrb	r2, [r1, r2]
 8002d7a:	435a      	muls	r2, r3
 8002d7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d7e:	197b      	adds	r3, r7, r5
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <UARTEx_SetNbDataToProcess+0xb8>)
 8002d84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d86:	0019      	movs	r1, r3
 8002d88:	f7fd fa4c 	bl	8000224 <__divsi3>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	b299      	uxth	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	226a      	movs	r2, #106	; 0x6a
 8002d94:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d96:	19bb      	adds	r3, r7, r6
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	193a      	adds	r2, r7, r4
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002da0:	5c8a      	ldrb	r2, [r1, r2]
 8002da2:	435a      	muls	r2, r3
 8002da4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <UARTEx_SetNbDataToProcess+0xb8>)
 8002dac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dae:	0019      	movs	r1, r3
 8002db0:	f7fd fa38 	bl	8000224 <__divsi3>
 8002db4:	0003      	movs	r3, r0
 8002db6:	b299      	uxth	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2268      	movs	r2, #104	; 0x68
 8002dbc:	5299      	strh	r1, [r3, r2]
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b005      	add	sp, #20
 8002dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	080032e4 	.word	0x080032e4
 8002dcc:	080032ec 	.word	0x080032ec

08002dd0 <memset>:
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	1882      	adds	r2, r0, r2
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d100      	bne.n	8002dda <memset+0xa>
 8002dd8:	4770      	bx	lr
 8002dda:	7019      	strb	r1, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	e7f9      	b.n	8002dd4 <memset+0x4>

08002de0 <__libc_init_array>:
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	2600      	movs	r6, #0
 8002de4:	4c0c      	ldr	r4, [pc, #48]	; (8002e18 <__libc_init_array+0x38>)
 8002de6:	4d0d      	ldr	r5, [pc, #52]	; (8002e1c <__libc_init_array+0x3c>)
 8002de8:	1b64      	subs	r4, r4, r5
 8002dea:	10a4      	asrs	r4, r4, #2
 8002dec:	42a6      	cmp	r6, r4
 8002dee:	d109      	bne.n	8002e04 <__libc_init_array+0x24>
 8002df0:	2600      	movs	r6, #0
 8002df2:	f000 f819 	bl	8002e28 <_init>
 8002df6:	4c0a      	ldr	r4, [pc, #40]	; (8002e20 <__libc_init_array+0x40>)
 8002df8:	4d0a      	ldr	r5, [pc, #40]	; (8002e24 <__libc_init_array+0x44>)
 8002dfa:	1b64      	subs	r4, r4, r5
 8002dfc:	10a4      	asrs	r4, r4, #2
 8002dfe:	42a6      	cmp	r6, r4
 8002e00:	d105      	bne.n	8002e0e <__libc_init_array+0x2e>
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	00b3      	lsls	r3, r6, #2
 8002e06:	58eb      	ldr	r3, [r5, r3]
 8002e08:	4798      	blx	r3
 8002e0a:	3601      	adds	r6, #1
 8002e0c:	e7ee      	b.n	8002dec <__libc_init_array+0xc>
 8002e0e:	00b3      	lsls	r3, r6, #2
 8002e10:	58eb      	ldr	r3, [r5, r3]
 8002e12:	4798      	blx	r3
 8002e14:	3601      	adds	r6, #1
 8002e16:	e7f2      	b.n	8002dfe <__libc_init_array+0x1e>
 8002e18:	080032f4 	.word	0x080032f4
 8002e1c:	080032f4 	.word	0x080032f4
 8002e20:	080032f8 	.word	0x080032f8
 8002e24:	080032f4 	.word	0x080032f4

08002e28 <_init>:
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2e:	bc08      	pop	{r3}
 8002e30:	469e      	mov	lr, r3
 8002e32:	4770      	bx	lr

08002e34 <_fini>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr
